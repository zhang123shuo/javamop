/* Generated By:JavaCC: Do not edit this line. PTCARET_PseudoCode_Parser.java */
package javamop.logicpluginshells.javaptcaret.parser;
import java.util.*;
import java.io.*;
import javamop.logicpluginshells.javaptcaret.ast.*;

public class PTCARET_PseudoCode_Parser implements PTCARET_PseudoCode_ParserConstants {
  public static PseudoCode parse(String input) throws ParseException
  {
    PseudoCode code;
    Reader reader = new StringReader(input);
    PTCARET_PseudoCode_Parser parser = new PTCARET_PseudoCode_Parser(reader);
    try
    {
      code = PTCARET_PseudoCode_Parser.EntireCode();
    }
    catch (Exception e)
    {
      throw new ParseException(e.getMessage());
    }
    catch (Error e)
    {
      throw new ParseException(e.getMessage());
    }
    return code;
  }

  static final public PseudoCode EntireCode() throws ParseException {
  PseudoCode c;
    c = PseudoCode();
    jj_consume_token(0);
    {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode PseudoCode() throws ParseException {
  PseudoCode_Assignments before;
  PseudoCode_Output output;
  PseudoCode_Assignments after;
    before = PseudoCode_Assignments();
    output = PseudoCode_Output();
    after = PseudoCode_Assignments();
    {if (true) return new PseudoCode(before, output, after);}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_Output PseudoCode_Output() throws ParseException {
  PseudoCode_Expr expr;
    jj_consume_token(OUTPUT);
    jj_consume_token(18);
    expr = PseudoCode_OrExpr();
    jj_consume_token(19);
    {if (true) return new PseudoCode_Output(expr);}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_Assignments PseudoCode_Assignments() throws ParseException {
  PseudoCode_Assignment assignment;
  PseudoCode_Assignments assignments = new PseudoCode_Assignments();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ALPHA:
      case BETA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      assignment = PseudoCode_Assignment();
      assignments.add(assignment);
    }
    {if (true) return assignments;}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_Assignment PseudoCode_Assignment() throws ParseException {
  PseudoCode_VarExpr var;
  PseudoCode_Expr expr;
    var = PseudoCode_VarExpr();
    jj_consume_token(20);
    expr = PseudoCode_OrExpr();
    jj_consume_token(21);
    {if (true) return new PseudoCode_Assignment(var, expr);}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_Expr PseudoCode_OrExpr() throws ParseException {
  PseudoCode_Expr e1;
  PseudoCode_Expr e2;
    e1 = PseudoCode_XorExpr();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(OR);
      e2 = PseudoCode_XorExpr();
      e1 = new PseudoCode_BinExpr(e1, PseudoCode_BinExpr.Operator.or, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_Expr PseudoCode_XorExpr() throws ParseException {
  PseudoCode_Expr e1;
  PseudoCode_Expr e2;
    e1 = PseudoCode_AndExpr();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(XOR);
      e2 = PseudoCode_AndExpr();
      e1 = new PseudoCode_BinExpr(e1, PseudoCode_BinExpr.Operator.xor, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_Expr PseudoCode_AndExpr() throws ParseException {
  PseudoCode_Expr e1;
  PseudoCode_Expr e2;
    e1 = PseudoCode_Clause();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      e2 = PseudoCode_Clause();
      e1 = new PseudoCode_BinExpr(e1, PseudoCode_BinExpr.Operator.and, e2);
    }
    {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_Expr PseudoCode_Clause() throws ParseException {
  Token t;
  PseudoCode_Expr e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      e = PseudoCode_Clause();
    {if (true) return new PseudoCode_NotExpr(e);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
    {if (true) return new PseudoCode_TrueExpr();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
    {if (true) return new PseudoCode_FalseExpr();}
      break;
    case ID:
      t = jj_consume_token(ID);
    {if (true) return new PseudoCode_EventExpr(t.image);}
      break;
    case OUTPUT:
      t = jj_consume_token(OUTPUT);
    {if (true) return new PseudoCode_EventExpr(t.image);}
      break;
    case 18:
      jj_consume_token(18);
      e = PseudoCode_OrExpr();
      jj_consume_token(19);
    {if (true) return e;}
      break;
    case ALPHA:
    case BETA:
      e = PseudoCode_VarExpr();
    {if (true) return e;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public PseudoCode_VarExpr PseudoCode_VarExpr() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ALPHA:
      jj_consume_token(ALPHA);
      jj_consume_token(22);
      t = jj_consume_token(CONSTANT);
      jj_consume_token(23);
    {if (true) return new PseudoCode_VarExpr(PseudoCode_VarExpr.Type.alpha, Integer.parseInt(t.image));}
      break;
    case BETA:
      jj_consume_token(BETA);
      jj_consume_token(22);
      t = jj_consume_token(CONSTANT);
      jj_consume_token(23);
    {if (true) return new PseudoCode_VarExpr(PseudoCode_VarExpr.Type.beta, Integer.parseInt(t.image));}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public PTCARET_PseudoCode_ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000,0x20,0x80,0x40,0x4fd00,0x6000,};
   }

  /** Constructor with InputStream. */
  public PTCARET_PseudoCode_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PTCARET_PseudoCode_Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PTCARET_PseudoCode_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PTCARET_PseudoCode_Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PTCARET_PseudoCode_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PTCARET_PseudoCode_Parser(PTCARET_PseudoCode_ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PTCARET_PseudoCode_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
