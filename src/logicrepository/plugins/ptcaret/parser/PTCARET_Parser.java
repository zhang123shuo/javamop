/* Generated By:JavaCC: Do not edit this line. PTCARET_Parser.java */
package logicrepository.plugins.ptcaret.parser;
import java.util.*;
import java.io.*;
import logicrepository.plugins.ptcaret.ast.*;

public class PTCARET_Parser implements PTCARET_ParserConstants {
  public static PTCARET_Formula parse(String input) throws ParseException
  {
    PTCARET_Formula formula;
    Reader reader = new StringReader(input);
    PTCARET_Parser parser = new PTCARET_Parser(reader);
    try
    {
      formula = parser.PTCARET_EntireFormula();
    }
    catch (Exception e)
    {
      throw new ParseException(e.getMessage());
    }
    catch (Error e)
    {
      throw new ParseException(e.getMessage());
    }
    return formula;
  }

  final public PTCARET_Formula PTCARET_EntireFormula() throws ParseException {
  Token t;
  PTCARET_Formula f;
    f = PTCARET_Formula();
    jj_consume_token(0);
    {if (true) return f;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_Formula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_ImpliesFormula();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IFF:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(IFF);
      f2 = PTCARET_ImpliesFormula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.iff);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_ImpliesFormula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_OrFormula();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPLIES:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(IMPLIES);
      f2 = PTCARET_OrFormula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.implies);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_OrFormula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_XorFormula();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      f2 = PTCARET_XorFormula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.or);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_XorFormula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_AndFormula();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(XOR);
      f2 = PTCARET_AndFormula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.xor);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_AndFormula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_Since_At_Begin_Formula();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      f2 = PTCARET_Since_At_Begin_Formula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.and);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_Since_At_Begin_Formula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_Since_At_Call_Formula();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINCE_STACK_ATBEGIN:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_6;
      }
      jj_consume_token(SINCE_STACK_ATBEGIN);
      f2 = PTCARET_Since_At_Call_Formula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since_at_b);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_Since_At_Call_Formula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_Since_At_BeginCall_Formula();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINCE_STACK_ATCALL:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_7;
      }
      jj_consume_token(SINCE_STACK_ATCALL);
      f2 = PTCARET_Since_At_BeginCall_Formula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since_at_c);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_Since_At_BeginCall_Formula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_AB_Since_Formula();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINCE_STACK:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_8;
      }
      jj_consume_token(SINCE_STACK);
      f2 = PTCARET_AB_Since_Formula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since_at_bc);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_AB_Since_Formula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_Since_Formula();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AB_SINCE:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_9;
      }
      jj_consume_token(AB_SINCE);
      f2 = PTCARET_Since_Formula();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.ab_since);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_Since_Formula() throws ParseException {
  Token t;
  PTCARET_Formula f1;
  PTCARET_Formula f2;
    f1 = PTCARET_Clause();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SINCE:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_10;
      }
      jj_consume_token(SINCE);
      f2 = PTCARET_Clause();
      f1 = new PTCARET_BinaryFormula(f1, f2, PTCARET_BinaryFormula.Operator.since);
    }
    {if (true) return f1;}
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_Clause() throws ParseException {
  Token t;
  PTCARET_Formula f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case ID:
    case 36:
      f = PTCARET_Term();
    {if (true) return f;}
      break;
    case NOT:
      jj_consume_token(NOT);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.not);}
      break;
    case PREVIOUSLY:
      jj_consume_token(PREVIOUSLY);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.prev);}
      break;
    case EVENTUALLY:
      jj_consume_token(EVENTUALLY);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually);}
      break;
    case ALWAYS:
      jj_consume_token(ALWAYS);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always);}
      break;
    case AB_PREVIOUSLY:
      jj_consume_token(AB_PREVIOUSLY);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.ab_prev);}
      break;
    case AB_EVENTUALLY:
      jj_consume_token(AB_EVENTUALLY);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.ab_eventually);}
      break;
    case AB_ALWAYS:
      jj_consume_token(AB_ALWAYS);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.ab_always);}
      break;
    case ATBEGIN:
      jj_consume_token(ATBEGIN);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.at_begin);}
      break;
    case ATCALL:
      jj_consume_token(ATCALL);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.at_call);}
      break;
    case ALWAYS_STACK_ATBEGIN:
      jj_consume_token(ALWAYS_STACK_ATBEGIN);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always_at_begin);}
      break;
    case ALWAYS_STACK_ATCALL:
      jj_consume_token(ALWAYS_STACK_ATCALL);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always_at_call);}
      break;
    case ALWAYS_STACK:
      jj_consume_token(ALWAYS_STACK);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.always_at_begincall);}
      break;
    case EVENTUALLY_STACK_ATBEGIN:
      jj_consume_token(EVENTUALLY_STACK_ATBEGIN);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually_at_begin);}
      break;
    case EVENTUALLY_STACK_ATCALL:
      jj_consume_token(EVENTUALLY_STACK_ATCALL);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually_at_call);}
      break;
    case EVENTUALLY_STACK:
      jj_consume_token(EVENTUALLY_STACK);
      f = PTCARET_Clause();
    {if (true) return new PTCARET_UnaryFormula(f, PTCARET_UnaryFormula.Operator.eventually_at_begincall);}
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public PTCARET_Formula PTCARET_Term() throws ParseException {
  Token t;
  PTCARET_Formula f;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
      jj_consume_token(TRUE);
    {if (true) return new PTCARET_True();}
      break;
    case FALSE:
      jj_consume_token(FALSE);
    {if (true) return new PTCARET_False();}
      break;
    case ID:
      t = jj_consume_token(ID);
    {if (true) return new PTCARET_Id(t.image);}
      break;
    case 36:
      jj_consume_token(36);
      f = PTCARET_Formula();
      jj_consume_token(37);
    {if (true) return f;}
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public PTCARET_ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[12];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x200,0x20,0x80,0x40,0x800000,0x4000000,0x20000000,0x40000,0x4000,0x9b7bb900,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x13,0x13,};
   }

  /** Constructor with InputStream. */
  public PTCARET_Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public PTCARET_Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new PTCARET_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public PTCARET_Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PTCARET_ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public PTCARET_Parser(PTCARET_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(PTCARET_ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 12; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[38];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 12; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 38; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
