/* Generated By:JavaCC: Do not edit this line. AspectJParser.java */
package javamop.parser.aspectj_parser;
import java.io.*;
import java.util.*;
import javamop.parser.*;
import javamop.parser.ast.*;
import javamop.parser.ast.aspectj.*;
import javamop.parser.ast.body.*;
import javamop.parser.ast.expr.*;
import javamop.parser.ast.stmt.*;
import javamop.parser.ast.type.*;

public class AspectJParser implements AspectJParserConstants {
  private static AspectJParser parser;

  public static PointCut parse(InputStream in, String encoding) throws ParseException
  {
    if (parser == null)
    {
      parser = new AspectJParser(in, encoding);
    }
    else
    {
      parser.ReInit(in);
    }
    return parser.PointCut();
  }

  public static PointCut parse(InputStream in) throws ParseException
  {
    return parse(in, null);
  }

  public static PointCut parse(File file, String encoding) throws ParseException
  {
    try
    {
      FileInputStream in = new FileInputStream(file);
      try
      {
        return parse(in, encoding);
      }
      finally
      {
        in.close();
      }
    }
    catch (IOException e)
    {
      throw new RuntimeException(e);
    }
  }

  public static PointCut parse(File file) throws ParseException
  {
    return parse(file, null);
  }

  private List add(List list, Object obj)
  {
    if (list == null)
    {
      list = new LinkedList();
    }
    list.add(obj);
    return list;
  }

  private class Modifier
  {
    final int modifiers;

    final int not_modifiers;

    final List annotations;
    int line, column;

    public Modifier(int modifiers, List annotations)
    {
      this.modifiers = modifiers;
      this.not_modifiers = 0;
      this.annotations = annotations;
    }

    public Modifier(int modifiers, int not_modifiers, int line, int column)
    {
      this.modifiers = modifiers;
      this.not_modifiers = not_modifiers;
      this.annotations = null;
      this.line = line;
      this.column = column;
    }
  }

  private class PositionString
  {
    int line, column;
    String str;

    public PositionString(int line, int column, String str)
    {
      this.line = line;
      this.column = column;
      this.str = str;
    }
  }

  final public PointCut PointCut() throws ParseException {
  PointCut ret;
  List < PointCut > pointcuts = new ArrayList < PointCut > ();
  int line, column;
    ret = AndPointCut();
    line = ret.getBeginLine();
    column = ret.getBeginColumn();
    pointcuts.add(ret);
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(SC_OR);
      ret = AndPointCut();
      pointcuts.add(ret);
    }
    if (pointcuts.size() == 1) {if (true) return pointcuts.get(0);}
    else {if (true) return new CombinedPointCut(line, column, "||", pointcuts);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut AndPointCut() throws ParseException {
  PointCut ret;
  List < PointCut > pointcuts = new ArrayList < PointCut > ();
  int line, column;
    ret = NotPointCut();
    line = ret.getBeginLine();
    column = ret.getBeginColumn();
    pointcuts.add(ret);
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(SC_AND);
      ret = NotPointCut();
      pointcuts.add(ret);
    }
    if (pointcuts.size() == 1) {if (true) return pointcuts.get(0);}
    else {if (true) return new CombinedPointCut(line, column, "&&", pointcuts);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut NotPointCut() throws ParseException {
  PointCut ret;
  int line, column;
    switch (jj_nt.kind) {
    case IF:
    case THIS:
    case CALL:
    case EXEC:
    case GET:
    case SET:
    case TARGET:
    case WITHIN:
    case ARGS:
    case THREAD:
    case CONDITION:
    case CFLOW:
    case CFLOWBELOW:
    case ENDPROGRAM:
    case ENDTHREAD:
    case ENDOBJECT:
    case STARTTHREAD:
    case IDPATTERN:
    case LPAREN:
      ret = BasePointCut();
      break;
    case BANG:
      jj_consume_token(BANG);
      ret = BasePointCut();
        line = ret.getBeginLine();
        column = ret.getBeginColumn();
        ret = new NotPointCut(line, column, ret);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public PointCut BasePointCut() throws ParseException {
  PointCut ret;
    switch (jj_nt.kind) {
    case CALL:
    case EXEC:
      ret = MethodPointCut();
      break;
    case GET:
    case SET:
      ret = FieldPointCut();
      break;
    case THIS:
      ret = ThisPointCut();
      break;
    case ARGS:
      ret = ArgsPointCut();
      break;
    case TARGET:
      ret = TargetPointCut();
      break;
    case WITHIN:
      ret = WithinPointCut();
      break;
    case THREAD:
      ret = ThreadPointCut();
      break;
    case IF:
      ret = IFPointCut();
      break;
    case CONDITION:
      ret = ConditionPointCut();
      break;
    case CFLOW:
    case CFLOWBELOW:
      ret = CFlowPointCut();
      break;
    case IDPATTERN:
      ret = IDPointCut();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      ret = PointCut();
      jj_consume_token(RPAREN);
      break;
    case ENDPROGRAM:
      ret = EndProgramPointCut();
      break;
    case ENDTHREAD:
      ret = EndThreadPointCut();
      break;
    case STARTTHREAD:
      ret = StartThreadPointCut();
      break;
    case ENDOBJECT:
      ret = EndObjectPointCut();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public PointCut MethodPointCut() throws ParseException {
  String type;
  int line, column;
  MethodPattern methodSig;
    switch (jj_nt.kind) {
    case CALL:
      jj_consume_token(CALL);
      break;
    case EXEC:
      jj_consume_token(EXEC);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    methodSig = MethodPattern();
    jj_consume_token(RPAREN);
    {if (true) return new MethodPointCut(line, column, type, methodSig);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut FieldPointCut() throws ParseException {
  String type;
  int line, column;
  FieldPattern pattern;
    switch (jj_nt.kind) {
    case SET:
      jj_consume_token(SET);
      break;
    case GET:
      jj_consume_token(GET);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    pattern = FieldPattern();
    jj_consume_token(RPAREN);
    {if (true) return new FieldPointCut(line, column, type, pattern);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut ThisPointCut() throws ParseException {
  String type;
  int line, column;
  TypePattern id;
    jj_consume_token(THIS);
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    id = TypePattern();
    jj_consume_token(RPAREN);
    {if (true) return new ThisPointCut(line, column, type, id);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut TargetPointCut() throws ParseException {
  String type;
  int line, column;
  TypePattern id;
    jj_consume_token(TARGET);
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    id = TypePattern();
    jj_consume_token(RPAREN);
    {if (true) return new TargetPointCut(line, column, type, id);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut ArgsPointCut() throws ParseException {
  String type;
  int line, column;
  List < TypePattern > parameters;
    jj_consume_token(ARGS);
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    parameters = ExtParameterTypes();
    {if (true) return new ArgsPointCut(line, column, type, parameters);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut WithinPointCut() throws ParseException {
  String type;
  int line, column;
  TypePattern pattern;
  String name;
    jj_consume_token(WITHIN);
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    pattern = TypePattern();
    jj_consume_token(RPAREN);
    {if (true) return new WithinPointCut(line, column, type, pattern);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut ThreadPointCut() throws ParseException {
  int line, column;
  PositionString id;
    jj_consume_token(THREAD);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    id = AnyIdPattern();
    jj_consume_token(RPAREN);
    {if (true) return new ThreadPointCut(line, column, id.str);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut EndProgramPointCut() throws ParseException {
  int line, column;
    jj_consume_token(ENDPROGRAM);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new EndProgramPointCut(line, column);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut EndThreadPointCut() throws ParseException {
  int line, column;
    jj_consume_token(ENDTHREAD);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new EndThreadPointCut(line, column);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut StartThreadPointCut() throws ParseException {
  int line, column;
    jj_consume_token(STARTTHREAD);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    {if (true) return new StartThreadPointCut(line, column);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut EndObjectPointCut() throws ParseException {
  int line, column;
  TypePattern targetType;
  PositionString id = null;
    jj_consume_token(ENDOBJECT);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    targetType = TypePattern();
    id = AnyIdPattern();
    jj_consume_token(RPAREN);
    {if (true) return new EndObjectPointCut(line, column, targetType, id.str);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut ConditionPointCut() throws ParseException {
  String type;
  int line, column;
  Expression expr;
    jj_consume_token(CONDITION);
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    expr = Expression();
    jj_consume_token(RPAREN);
    {if (true) return new ConditionPointCut(line, column, type, expr);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut CFlowPointCut() throws ParseException {
  PointCut p;
  int line, column;
  String type;
    switch (jj_nt.kind) {
    case CFLOW:
      jj_consume_token(CFLOW);
      break;
    case CFLOWBELOW:
      jj_consume_token(CFLOWBELOW);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    p = PointCut();
    jj_consume_token(RPAREN);
    {if (true) return new CFlowPointCut(line, column, type, p);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut IFPointCut() throws ParseException {
  String type;
  int line, column;
  Expression expr;
    jj_consume_token(IF);
    line = token.beginLine;
    column = token.beginColumn;
    type = token.image;
    jj_consume_token(LPAREN);
    expr = Expression();
    jj_consume_token(RPAREN);
    {if (true) return new IFPointCut(line, column, type, expr);}
    throw new Error("Missing return statement in function");
  }

  final public PointCut IDPointCut() throws ParseException {
  int line, column;
  List < TypePattern > parameters;
  String id;
  PositionString name = null;
    name = IdPattern();
    line = name.line;
    column = name.column;
    id = name.str;
    parameters = ExtParameterTypes();
    {if (true) return new IDPointCut(line, column, id, parameters);}
    throw new Error("Missing return statement in function");
  }

/* the pattern definitions come from: http://www.eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html#pattern-summary  */
  final public FieldPattern FieldPattern() throws ParseException {
  Modifier mod = new Modifier(0, 0, 0, 0);
  TypePattern retType = null;
  TypePattern owner = null;
  PositionString name = null;
  int line =-1, column =-1;
    if (jj_2_1(2147483647)) {
      mod = ExtModifiers();
      line = mod.line;
      column = mod.column;
    } else {
      ;
    }
    retType = TypePattern();
    if (line == - 1)
    {
      line = retType.getBeginLine();
      column = retType.getBeginColumn();
    }
    if (jj_2_2(2147483647)) {
      owner = TypePattern();
      jj_consume_token(DOT);
    } else {
      ;
    }
    name = AnyIdPattern();
    {if (true) return new FieldPattern(line, column, mod.modifiers, mod.not_modifiers, retType, owner, name.str);}
    throw new Error("Missing return statement in function");
  }

  final public MethodPattern MethodPattern() throws ParseException {
  Modifier mod = new Modifier(0, 0, 0, 0);
  TypePattern retType = null;
  TypePattern owner = null;
  PositionString name;
  List < TypePattern > parameters;
  List < TypePattern > throwTypes = null;
  int line =-1, column =-1;
    if (jj_2_3(2147483647)) {
      mod = ExtModifiers();
      line = mod.line;
      column = mod.column;
    } else {
      ;
    }
    if (jj_2_4(2147483647)) {
      retType = TypePattern();
      if (line == - 1)
      {
        line = retType.getBeginLine();
        column = retType.getBeginColumn();
      }
    } else {
      ;
    }
    if (jj_2_6(2147483647)) {
      jj_consume_token(DOT);
      jj_consume_token(NEW);
      name = new PositionString(token.beginLine, token.beginColumn, token.image);
      owner = retType;
      retType = null;
    } else {
      switch (jj_nt.kind) {
      case EVENT:
      case CREATION:
      case UNSYNC:
      case DECENT:
      case PERTHREAD:
      case SUFFIX:
      case BEFORE:
      case AFTER:
      case AROUND:
      case CALL:
      case EXEC:
      case GET:
      case SET:
      case TARGET:
      case WITHIN:
      case ARGS:
      case THREAD:
      case CONDITION:
      case CFLOW:
      case CFLOWBELOW:
      case RETURNING:
      case THROWING:
      case ENDPROGRAM:
      case ENDTHREAD:
      case ENDOBJECT:
      case STARTTHREAD:
      case IDPATTERN:
      case LPAREN:
      case BANG:
        if (jj_2_5(2147483647)) {
          owner = TypePatternEndingDot();
        if (line == - 1)
        {
          line = owner.getBeginLine();
          column = owner.getBeginColumn();
        }
        } else {
          ;
        }
        name = AnyIdPattern();
      if (line == - 1)
      {
        line = name.line;
        column = name.column;
      }
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    parameters = ExtParameterTypes();
    switch (jj_nt.kind) {
    case THROWS:
      jj_consume_token(THROWS);
      throwTypes = TypePatterns();
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return new MethodPattern(line, column, mod.modifiers, mod.not_modifiers, retType, owner, name.str, parameters, throwTypes);}
    throw new Error("Missing return statement in function");
  }

  final public Modifier ExtModifiers() throws ParseException {
  int [ ] modifiers =
  {
    0, 0
  }
  ;
  int i = 0;
  int line =-1;
  int column =-1;
    label_3:
    while (true) {
      switch (jj_nt.kind) {
      case BANG:
        jj_consume_token(BANG);
          i = 1;
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      switch (jj_nt.kind) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.PUBLIC, token);
        break;
      case STATIC:
        jj_consume_token(STATIC);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.STATIC, token);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.PROTECTED, token);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.PRIVATE, token);
        break;
      case FINAL:
        jj_consume_token(FINAL);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.FINAL, token);
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.ABSTRACT, token);
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.SYNCHRONIZED, token);
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.NATIVE, token);
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.TRANSIENT, token);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.VOLATILE, token);
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
          if (line == - 1)
          {
            line = token.beginLine;
            column = token.beginColumn;
          }
          modifiers [ i ] = AspectJModifierSet.addModifier(modifiers [ i ], AspectJModifierSet.STRICTFP, token);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        i = 0;
      if (jj_2_7(2)) {
        ;
      } else {
        break label_3;
      }
    }
    {if (true) return new Modifier(modifiers [ 0 ], modifiers [ 1 ], line, column);}
    throw new Error("Missing return statement in function");
  }

  final public List < TypePattern > ExtParameterTypes() throws ParseException {
  List < TypePattern > parameters = new ArrayList < TypePattern > ();
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case IDPATTERN:
    case LPAREN:
    case BANG:
    case DOTDOT:
      parameters = TypePatterns();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return parameters;}
    throw new Error("Missing return statement in function");
  }

  final public List < TypePattern > TypePatterns() throws ParseException {
  List < TypePattern > typelist = new ArrayList < TypePattern > ();
  TypePattern t;
    t = TypeOrDotdot();
    typelist.add(t);
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      t = TypeOrDotdot();
      typelist.add(t);
    }
    {if (true) return typelist;}
    throw new Error("Missing return statement in function");
  }

  final public TypePattern TypeOrDotdot() throws ParseException {
  TypePattern t = null;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case VOID:
    case IDPATTERN:
    case LPAREN:
    case BANG:
      t = TypePattern();
      break;
    case DOTDOT:
      jj_consume_token(DOTDOT);
      t = new WildcardParameter(token.beginLine, token.beginColumn);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public TypePattern TypePattern() throws ParseException {
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
    t = AndTypePattern();
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
    label_5:
    while (true) {
      switch (jj_nt.kind) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(SC_OR);
      t = AndTypePattern();
      types.add(t);
    }
    if (types.size() == 1) {if (true) return t;}
    else {if (true) return new CombinedTypePattern(line, column, "||", types);}
    throw new Error("Missing return statement in function");
  }

  final public TypePattern AndTypePattern() throws ParseException {
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
    t = NotTypePattern();
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
    label_6:
    while (true) {
      switch (jj_nt.kind) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_6;
      }
      jj_consume_token(SC_AND);
      t = NotTypePattern();
      types.add(t);
    }
    if (types.size() == 1) {if (true) return t;}
    else {if (true) return new CombinedTypePattern(line, column, "&&", types);}
    throw new Error("Missing return statement in function");
  }

  final public TypePattern NotTypePattern() throws ParseException {
  TypePattern t;
  int line =-1, column =-1;
    switch (jj_nt.kind) {
    case BANG:
      jj_consume_token(BANG);
      line = token.beginLine;
      column = token.beginColumn;
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    t = BaseTypePattern();
    if (line == - 1) {if (true) return t;}
    else
    {
      new NotTypePattern(line, column, t);
    }
    throw new Error("Missing return statement in function");
  }

  final public TypePattern BaseTypePattern() throws ParseException {
  PositionString id = null;
  TypePattern t = null;
  int line, column;
  PrimitiveType type = null;
  String s;
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      line = token.beginLine;
      column = token.beginColumn;
      t = TypePattern();
      jj_consume_token(RPAREN);
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      type = PrimitiveType();
      line = type.getBeginLine();
      column = type.getBeginColumn();
      s = type.toString();
      label_7:
      while (true) {
        switch (jj_nt.kind) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      s += "[]";
      }
      t = new BaseTypePattern(line, column, s);
      break;
    case VOID:
      jj_consume_token(VOID);
      line = token.beginLine;
      column = token.beginColumn;
      t = new BaseTypePattern(line, column, "void");
      break;
    case IDPATTERN:
      id = IdPattern();
      switch (jj_nt.kind) {
      case PLUS:
        jj_consume_token(PLUS);
        id.str += "+";
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      label_8:
      while (true) {
        switch (jj_nt.kind) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_8;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      id.str += "[]";
      }
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (t == null) t = new BaseTypePattern(id.line, id.column, id.str);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public PositionString AnyIdPattern() throws ParseException {
  String id;
  int line, column;
    switch (jj_nt.kind) {
    case IDPATTERN:
      jj_consume_token(IDPATTERN);
      break;
    case EVENT:
      jj_consume_token(EVENT);
      break;
    case CREATION:
      jj_consume_token(CREATION);
      break;
    case UNSYNC:
      jj_consume_token(UNSYNC);
      break;
    case DECENT:
      jj_consume_token(DECENT);
      break;
    case PERTHREAD:
      jj_consume_token(PERTHREAD);
      break;
    case SUFFIX:
      jj_consume_token(SUFFIX);
      break;
    case BEFORE:
      jj_consume_token(BEFORE);
      break;
    case AFTER:
      jj_consume_token(AFTER);
      break;
    case AROUND:
      jj_consume_token(AROUND);
      break;
    case CALL:
      jj_consume_token(CALL);
      break;
    case EXEC:
      jj_consume_token(EXEC);
      break;
    case GET:
      jj_consume_token(GET);
      break;
    case SET:
      jj_consume_token(SET);
      break;
    case TARGET:
      jj_consume_token(TARGET);
      break;
    case WITHIN:
      jj_consume_token(WITHIN);
      break;
    case ARGS:
      jj_consume_token(ARGS);
      break;
    case THREAD:
      jj_consume_token(THREAD);
      break;
    case CONDITION:
      jj_consume_token(CONDITION);
      break;
    case CFLOW:
      jj_consume_token(CFLOW);
      break;
    case CFLOWBELOW:
      jj_consume_token(CFLOWBELOW);
      break;
    case RETURNING:
      jj_consume_token(RETURNING);
      break;
    case THROWING:
      jj_consume_token(THROWING);
      break;
    case ENDPROGRAM:
      jj_consume_token(ENDPROGRAM);
      break;
    case ENDTHREAD:
      jj_consume_token(ENDTHREAD);
      break;
    case ENDOBJECT:
      jj_consume_token(ENDOBJECT);
      break;
    case STARTTHREAD:
      jj_consume_token(STARTTHREAD);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
    label_9:
    while (true) {
      if (jj_2_8(2)) {
        ;
      } else {
        break label_9;
      }
      switch (jj_nt.kind) {
      case DOT:
        jj_consume_token(DOT);
        break;
      case DOTDOT:
        jj_consume_token(DOTDOT);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id += token.image;
      switch (jj_nt.kind) {
      case IDPATTERN:
        jj_consume_token(IDPATTERN);
        break;
      case EVENT:
        jj_consume_token(EVENT);
        break;
      case CREATION:
        jj_consume_token(CREATION);
        break;
      case UNSYNC:
        jj_consume_token(UNSYNC);
        break;
      case DECENT:
        jj_consume_token(DECENT);
        break;
      case PERTHREAD:
        jj_consume_token(PERTHREAD);
        break;
      case SUFFIX:
        jj_consume_token(SUFFIX);
        break;
      case BEFORE:
        jj_consume_token(BEFORE);
        break;
      case AFTER:
        jj_consume_token(AFTER);
        break;
      case AROUND:
        jj_consume_token(AROUND);
        break;
      case CALL:
        jj_consume_token(CALL);
        break;
      case EXEC:
        jj_consume_token(EXEC);
        break;
      case GET:
        jj_consume_token(GET);
        break;
      case SET:
        jj_consume_token(SET);
        break;
      case TARGET:
        jj_consume_token(TARGET);
        break;
      case WITHIN:
        jj_consume_token(WITHIN);
        break;
      case ARGS:
        jj_consume_token(ARGS);
        break;
      case THREAD:
        jj_consume_token(THREAD);
        break;
      case CONDITION:
        jj_consume_token(CONDITION);
        break;
      case CFLOW:
        jj_consume_token(CFLOW);
        break;
      case CFLOWBELOW:
        jj_consume_token(CFLOWBELOW);
        break;
      case RETURNING:
        jj_consume_token(RETURNING);
        break;
      case THROWING:
        jj_consume_token(THROWING);
        break;
      case ENDPROGRAM:
        jj_consume_token(ENDPROGRAM);
        break;
      case ENDTHREAD:
        jj_consume_token(ENDTHREAD);
        break;
      case ENDOBJECT:
        jj_consume_token(ENDOBJECT);
        break;
      case STARTTHREAD:
        jj_consume_token(STARTTHREAD);
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id += token.image;
    }
    {if (true) return new PositionString(line, column, id);}
    throw new Error("Missing return statement in function");
  }

  final public PositionString IdPattern() throws ParseException {
  String id;
  int line, column;
    jj_consume_token(IDPATTERN);
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
    label_10:
    while (true) {
      if (jj_2_9(2)) {
        ;
      } else {
        break label_10;
      }
      switch (jj_nt.kind) {
      case DOT:
        jj_consume_token(DOT);
        break;
      case DOTDOT:
        jj_consume_token(DOTDOT);
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id += token.image;
      jj_consume_token(IDPATTERN);
      id += token.image;
    }
    {if (true) return new PositionString(line, column, id);}
    throw new Error("Missing return statement in function");
  }

  final public TypePattern TypePatternEndingDot() throws ParseException {
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
    t = AndTypePattern2();
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
    label_11:
    while (true) {
      switch (jj_nt.kind) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_11;
      }
      jj_consume_token(SC_OR);
      t = AndTypePattern2();
      types.add(t);
    }
    jj_consume_token(DOT);
    if (types.size() == 1) {if (true) return t;}
    else {if (true) return new CombinedTypePattern(line, column, "||", types);}
    throw new Error("Missing return statement in function");
  }

  final public TypePattern AndTypePattern2() throws ParseException {
  List < TypePattern > types = new ArrayList < TypePattern > ();
  TypePattern t;
  int line, column;
    t = NotTypePattern2();
    line = t.getBeginLine();
    column = t.getBeginColumn();
    types.add(t);
    label_12:
    while (true) {
      switch (jj_nt.kind) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_12;
      }
      jj_consume_token(SC_AND);
      t = NotTypePattern2();
      types.add(t);
    }
    if (types.size() == 1) {if (true) return t;}
    else {if (true) return new CombinedTypePattern(line, column, "&&", types);}
    throw new Error("Missing return statement in function");
  }

  final public TypePattern NotTypePattern2() throws ParseException {
  TypePattern t;
  int line =-1, column =-1;
    switch (jj_nt.kind) {
    case BANG:
      jj_consume_token(BANG);
      line = token.beginLine;
      column = token.beginColumn;
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    t = BaseTypePattern2();
    if (line == - 1) {if (true) return t;}
    else
    {
      new NotTypePattern(line, column, t);
    }
    throw new Error("Missing return statement in function");
  }

  final public TypePattern BaseTypePattern2() throws ParseException {
  PositionString id = null;
  TypePattern t = null;
  int line, column;
    switch (jj_nt.kind) {
    case LPAREN:
      jj_consume_token(LPAREN);
      line = token.beginLine;
      column = token.beginColumn;
      t = TypePattern();
      jj_consume_token(RPAREN);
      break;
    case IDPATTERN:
      id = IdPattern2();
      switch (jj_nt.kind) {
      case PLUS:
        jj_consume_token(PLUS);
        id.str += "+";
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case LBRACKET:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_13;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
      {
        id.str += "[]";
      }
      }
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (t == null) t = new BaseTypePattern(id.line, id.column, id.str);
    {if (true) return t;}
    throw new Error("Missing return statement in function");
  }

  final public PositionString IdPattern2() throws ParseException {
  String id;
  int line, column;
    jj_consume_token(IDPATTERN);
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
    label_14:
    while (true) {
      if (jj_2_10(2147483647)) {
        ;
      } else {
        break label_14;
      }
      switch (jj_nt.kind) {
      case DOT:
        jj_consume_token(DOT);
        break;
      case DOTDOT:
        jj_consume_token(DOTDOT);
        break;
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id += token.image;
      jj_consume_token(IDPATTERN);
      id += token.image;
    }
    {if (true) return new PositionString(line, column, id);}
    throw new Error("Missing return statement in function");
  }

  final public PositionString IdPatternWithDot() throws ParseException {
  String id;
  int line, column;
    jj_consume_token(IDPATTERN);
    line = token.beginLine;
    column = token.beginColumn;
    id = token.image;
    if (jj_2_11(2147483647)) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch (jj_nt.kind) {
    case DOT:
      jj_consume_token(DOT);
      break;
    case DOTDOT:
      jj_consume_token(DOTDOT);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    id += token.image;
    jj_consume_token(IDPATTERN);
    id += token.image;
    label_15:
    while (true) {
      if (jj_2_12(2147483647)) {
        ;
      } else {
        break label_15;
      }
      switch (jj_nt.kind) {
      case DOT:
        jj_consume_token(DOT);
        break;
      case DOTDOT:
        jj_consume_token(DOTDOT);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id += token.image;
      jj_consume_token(IDPATTERN);
      id += token.image;
    }
    {if (true) return new PositionString(line, column, id);}
    throw new Error("Missing return statement in function");
  }

/* Moved "{" "}" up -- PAT */
  final public List < BodyDeclaration > ClassOrInterfaceBody(boolean isInterface) throws ParseException {
  List < BodyDeclaration > ret = new LinkedList < BodyDeclaration > ();
  BodyDeclaration member;
    label_16:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_16;
      }
      member = ClassOrInterfaceBodyDeclaration(isInterface);
      ret.add(member);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BodyDeclaration ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {
  boolean isNestedInterface = false;
  Modifier modifier;
  BodyDeclaration ret;
    if (jj_2_16(2)) {
      ret = Initializer();
      if (isInterface) {if (true) throw new ParseException(token, "An interface cannot have initializers");}
    } else {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDPATTERN:
      case AT:
      case LT:
        modifier = Modifiers();
        switch (jj_nt.kind) {
        case CLASS:
        case INTERFACE:
          ret = ClassOrInterfaceDeclaration(modifier);
          break;
        case ENUM:
          ret = EnumDeclaration(modifier);
          break;
        case AT:
          ret = AnnotationTypeDeclaration(modifier);
          break;
        default:
          jj_la1[34] = jj_gen;
          if (jj_2_14(2147483647)) {
            ret = ConstructorDeclaration(modifier);
          } else if (jj_2_15(2147483647)) {
            ret = FieldDeclaration(modifier);
          } else {
            switch (jj_nt.kind) {
            case BOOLEAN:
            case BYTE:
            case CHAR:
            case DOUBLE:
            case FLOAT:
            case INT:
            case LONG:
            case SHORT:
            case VOID:
            case IDPATTERN:
            case LT:
              ret = MethodDeclaration(modifier);
              break;
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
      ret = new EmptyMemberDeclaration(token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public FieldDeclaration FieldDeclaration(Modifier modifier) throws ParseException {
  Type type;
  List variables = new LinkedList();
  VariableDeclarator val;
    // Modifiers are already matched in the caller
      type = Type();
    val = VariableDeclarator();
    variables.add(val);
    label_17:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_17;
      }
      jj_consume_token(COMMA);
      val = VariableDeclarator();
      variables.add(val);
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new FieldDeclaration(type.getBeginLine(), type.getBeginColumn(), modifier.modifiers, modifier.annotations, type, variables);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarator VariableDeclarator() throws ParseException {
  VariableDeclaratorId id;
  Expression init = null;
    id = VariableDeclaratorId();
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      init = VariableInitializer();
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    {if (true) return new VariableDeclarator(id.getBeginLine(), id.getBeginColumn(), id, init);}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclaratorId VariableDeclaratorId() throws ParseException {
  String name;
  int arrayCount = 0;
  int line;
  int column;
    jj_consume_token(IDPATTERN);
    name = token.image;
    line = token.beginLine;
    column = token.beginColumn;
    label_18:
    while (true) {
      switch (jj_nt.kind) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[39] = jj_gen;
        break label_18;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    arrayCount++;
    }
    {if (true) return new VariableDeclaratorId(line, column, name, arrayCount);}
    throw new Error("Missing return statement in function");
  }

  final public Expression VariableInitializer() throws ParseException {
  Expression ret;
    switch (jj_nt.kind) {
    case LBRACE:
      ret = ArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ret = Expression();
      break;
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayInitializerExpr ArrayInitializer() throws ParseException {
  List values = null;
  Expression val;
  int line;
  int column;
    jj_consume_token(LBRACE);
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
    case LBRACE:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      val = VariableInitializer();
      values = add(values, val);
      label_19:
      while (true) {
        if (jj_2_17(2)) {
          ;
        } else {
          break label_19;
        }
        jj_consume_token(COMMA);
        val = VariableInitializer();
        values = add(values, val);
      }
      break;
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return new ArrayInitializerExpr(line, column, values);}
    throw new Error("Missing return statement in function");
  }

  final public MethodDeclaration MethodDeclaration(Modifier modifier) throws ParseException {
  List typeParameters = null;
  Type type;
  String name;
  List parameters;
  int arrayCount = 0;
  List throws_ = null;
  BlockStmt block = null;
  int line =-1;
  int column = 0;
    switch (jj_nt.kind) {
    case LT:
      typeParameters = TypeParameters();
      line = ((TypeParameter) typeParameters.get(0)).getBeginLine();
      column = ((TypeParameter) typeParameters.get(0)).getBeginColumn();
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    type = ResultType();
    if (line == - 1)
    {
      line = type.getBeginLine();
      column = type.getBeginColumn();
    }
    jj_consume_token(IDPATTERN);
    name = token.image;
    parameters = FormalParameters();
    label_20:
    while (true) {
      switch (jj_nt.kind) {
      case LBRACKET:
        ;
        break;
      default:
        jj_la1[44] = jj_gen;
        break label_20;
      }
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    arrayCount++;
    }
    switch (jj_nt.kind) {
    case THROWS:
      jj_consume_token(THROWS);
      throws_ = NameList();
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case LBRACE:
      block = Block();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new MethodDeclaration(line, column, modifier.modifiers, modifier.annotations, typeParameters, type, name, parameters, arrayCount, throws_, block);}
    throw new Error("Missing return statement in function");
  }

  final public List FormalParameters() throws ParseException {
  List ret = null;
  Parameter par;
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case ABSTRACT:
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FINAL:
    case FLOAT:
    case INT:
    case LONG:
    case NATIVE:
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case SHORT:
    case STATIC:
    case STRICTFP:
    case SYNCHRONIZED:
    case TRANSIENT:
    case VOID:
    case VOLATILE:
    case IDPATTERN:
    case AT:
      par = FormalParameter();
      ret = add(ret, par);
      label_21:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_21;
        }
        jj_consume_token(COMMA);
        par = FormalParameter();
        ret = add(ret, par);
      }
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Parameter FormalParameter() throws ParseException {
  Modifier modifier;
  Type type;
  boolean isVarArg = false;
  VariableDeclaratorId id;
    modifier = Modifiers();
    type = Type();
    switch (jj_nt.kind) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
      isVarArg = true;
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    id = VariableDeclaratorId();
    {if (true) return new Parameter(type.getBeginLine(), type.getBeginColumn(), modifier.modifiers, modifier.annotations, type, isVarArg, id);}
    throw new Error("Missing return statement in function");
  }

  final public ConstructorDeclaration ConstructorDeclaration(Modifier modifier) throws ParseException {
  List typeParameters = null;
  String name;
  List parameters;
  List throws_ = null;
  ExplicitConstructorInvocationStmt exConsInv = null;
  List stmts;
  int line =-1;
  int column = 0;
  int bbLine = 0;
  int bbColumn = 0;
  int beLine = 0;
  int beColumn = 0;
    switch (jj_nt.kind) {
    case LT:
      typeParameters = TypeParameters();
      line = ((TypeParameter) typeParameters.get(0)).getBeginLine();
      column = ((TypeParameter) typeParameters.get(0)).getBeginColumn();
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    jj_consume_token(IDPATTERN);
    name = token.image;
    if (line == - 1)
    {
      line = token.beginLine;
      column = token.beginColumn;
    }
    parameters = FormalParameters();
    switch (jj_nt.kind) {
    case THROWS:
      jj_consume_token(THROWS);
      throws_ = NameList();
      break;
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    bbLine = token.beginLine;
    bbColumn = token.beginColumn;
    if (jj_2_18(2147483647)) {
      exConsInv = ExplicitConstructorInvocation();
    } else {
      ;
    }
    stmts = Statements();
    jj_consume_token(RBRACE);
    beLine = token.beginLine;
    beColumn = token.beginColumn;
    if (exConsInv != null)
    {
      if (stmts == null)
      {
        stmts = new LinkedList();
      }
      stmts.add(0, exConsInv);
    }
    {if (true) return new ConstructorDeclaration(line, column, modifier.modifiers, modifier.annotations, typeParameters, name, parameters, throws_, new BlockStmt(bbLine, bbColumn, beLine, beColumn, stmts));}
    throw new Error("Missing return statement in function");
  }

  final public ExplicitConstructorInvocationStmt ExplicitConstructorInvocation() throws ParseException {
  boolean isThis = false;
  List args;
  Expression expr = null;
  List typeArgs = null;
  int line =-1;
  int column = 0;
    if (jj_2_20(2147483647)) {
      switch (jj_nt.kind) {
      case LT:
        typeArgs = TypeArguments();
        line = ((Type)typeArgs.get(0)).getBeginLine();
        column = ((Type) typeArgs.get(0)).getBeginColumn();
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      jj_consume_token(THIS);
      if (line == - 1)
      {
        line = token.beginLine;
        column = token.beginColumn;
      }
      isThis = true;
      args = Arguments();
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case NEW:
      case INT:
      case LONG:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDPATTERN:
      case LPAREN:
      case LT:
        if (jj_2_19(2147483647)) {
          expr = PrimaryExpressionWithoutSuperSuffix();
          jj_consume_token(DOT);
        line = expr.getBeginLine();
        column = expr.getBeginColumn();
        } else {
          ;
        }
        switch (jj_nt.kind) {
        case LT:
          typeArgs = TypeArguments();
        if (line == - 1)
        {
          line = ((Type) typeArgs.get(0)).getBeginLine();
          column = ((Type) typeArgs.get(0)).getBeginColumn();
        }
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
        jj_consume_token(SUPER);
      if (line == - 1)
      {
        line = token.beginLine;
        column = token.beginColumn;
      }
        args = Arguments();
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new ExplicitConstructorInvocationStmt(line, column, typeArgs, isThis, expr, args);}
    throw new Error("Missing return statement in function");
  }

  final public List Statements() throws ParseException {
  List ret = null;
  Statement stmt;
    label_22:
    while (true) {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CLASS:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case FOR:
      case NEW:
      case IF:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case RETURN:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRANSIENT:
      case TRUE:
      case TRY:
      case VOID:
      case VOLATILE:
      case WHILE:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDPATTERN:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case AT:
      case INCR:
      case DECR:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_22;
      }
      stmt = BlockStatement();
      ret = add(ret, stmt);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public InitializerDeclaration Initializer() throws ParseException {
  BlockStmt block;
  int line =-1;
  int column = 0;
    switch (jj_nt.kind) {
    case STATIC:
      jj_consume_token(STATIC);
      line = token.beginLine;
      column = token.beginColumn;
      break;
    default:
      jj_la1[56] = jj_gen;
      ;
    }
    block = Block();
    if (line == - 1)
    {
      line = block.getBeginLine();
      column = block.getBeginColumn();
    }
    {if (true) return new InitializerDeclaration(line, column, block);}
    throw new Error("Missing return statement in function");
  }

/*
 * Type, name and expression syntax follows.
 */
  final public Type Type() throws ParseException {
  Type ret;
    if (jj_2_21(2)) {
      ret = ReferenceType();
    } else {
      switch (jj_nt.kind) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
        ret = PrimitiveType();
        break;
      case VOID:
        jj_consume_token(VOID);
      ret = new VoidType(token.beginLine, token.beginColumn);
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public ReferenceType ReferenceType() throws ParseException {
  Type type;
  int arrayCount = 0;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      type = PrimitiveType();
      label_23:
      while (true) {
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        arrayCount++;
        if (jj_2_22(2)) {
          ;
        } else {
          break label_23;
        }
      }
      break;
    case IDPATTERN:
      type = ClassOrInterfaceType();
      label_24:
      while (true) {
        if (jj_2_23(2)) {
          ;
        } else {
          break label_24;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        arrayCount++;
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new ReferenceType(type.getBeginLine(), type.getBeginColumn(), type, arrayCount);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceType ClassOrInterfaceType() throws ParseException {
  ClassOrInterfaceType ret;
  String name;
  List typeArgs = null;
  int line;
  int column;
    jj_consume_token(IDPATTERN);
    line = token.beginLine;
    column = token.beginColumn;
    name = token.image;
    if (jj_2_24(2)) {
      typeArgs = TypeArguments();
    } else {
      ;
    }
    ret = new ClassOrInterfaceType(line, column, null, name, typeArgs);
    label_25:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDPATTERN);
      name = token.image;
      if (jj_2_26(2)) {
        typeArgs = TypeArguments();
      } else {
        ;
      }
      ret = new ClassOrInterfaceType(line, column, ret, name, typeArgs);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List TypeArguments() throws ParseException {
  List ret = new LinkedList();
  Type type;
    jj_consume_token(LT);
    type = TypeArgument();
    ret.add(type);
    label_26:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[59] = jj_gen;
        break label_26;
      }
      jj_consume_token(COMMA);
      type = TypeArgument();
      ret.add(type);
    }
    jj_consume_token(GT);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Type TypeArgument() throws ParseException {
  Type ret;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case IDPATTERN:
      ret = ReferenceType();
      break;
    case HOOK:
      ret = Wildcard();
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public WildcardType Wildcard() throws ParseException {
  ReferenceType ext = null;
  ReferenceType sup = null;
  int line;
  int column;
    jj_consume_token(HOOK);
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case EXTENDS:
    case SUPER:
      switch (jj_nt.kind) {
      case EXTENDS:
        jj_consume_token(EXTENDS);
        ext = ReferenceType();
        break;
      case SUPER:
        jj_consume_token(SUPER);
        sup = ReferenceType();
        break;
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    {if (true) return new WildcardType(line, column, ext, sup);}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveType PrimitiveType() throws ParseException {
  PrimitiveType ret;
    switch (jj_nt.kind) {
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Boolean);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Char);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Byte);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Short);
      break;
    case INT:
      jj_consume_token(INT);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Int);
      break;
    case LONG:
      jj_consume_token(LONG);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Long);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Float);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      ret = new PrimitiveType(token.beginLine, token.beginColumn, PrimitiveType.Primitive.Double);
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Type ResultType() throws ParseException {
  Type ret;
    ret = Type();
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public NameExpr Name() throws ParseException {
  NameExpr ret;
    jj_consume_token(IDPATTERN);
    ret = new NameExpr(token.beginLine, token.beginColumn, token.image);
    label_27:
    while (true) {
      if (jj_2_27(2)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDPATTERN);
      ret = new QualifiedNameExpr(token.beginLine, token.beginColumn, ret, token.image);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List NameList() throws ParseException {
  List ret = new LinkedList();
  NameExpr name;
    name = Name();
    ret.add(name);
    label_28:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[64] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      name = Name();
      ret.add(name);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/*
 * Expression syntax follows.
 */
  final public Expression Expression() throws ParseException {
  Expression ret;
  AssignExpr.Operator op;
  Expression value;
    ret = ConditionalExpression();
    if (jj_2_28(2)) {
      op = AssignmentOperator();
      value = Expression();
      ret = new AssignExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, value, op);
    } else {
      ;
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public AssignExpr.Operator AssignmentOperator() throws ParseException {
  AssignExpr.Operator ret;
    switch (jj_nt.kind) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      ret = AssignExpr.Operator.assign;
      break;
    case STARASSIGN:
      jj_consume_token(STARASSIGN);
      ret = AssignExpr.Operator.star;
      break;
    case SLASHASSIGN:
      jj_consume_token(SLASHASSIGN);
      ret = AssignExpr.Operator.slash;
      break;
    case REMASSIGN:
      jj_consume_token(REMASSIGN);
      ret = AssignExpr.Operator.rem;
      break;
    case PLUSASSIGN:
      jj_consume_token(PLUSASSIGN);
      ret = AssignExpr.Operator.plus;
      break;
    case MINUSASSIGN:
      jj_consume_token(MINUSASSIGN);
      ret = AssignExpr.Operator.minus;
      break;
    case LSHIFTASSIGN:
      jj_consume_token(LSHIFTASSIGN);
      ret = AssignExpr.Operator.lShift;
      break;
    case RSIGNEDSHIFTASSIGN:
      jj_consume_token(RSIGNEDSHIFTASSIGN);
      ret = AssignExpr.Operator.rSignedShift;
      break;
    case RUNSIGNEDSHIFTASSIGN:
      jj_consume_token(RUNSIGNEDSHIFTASSIGN);
      ret = AssignExpr.Operator.rUnsignedShift;
      break;
    case ANDASSIGN:
      jj_consume_token(ANDASSIGN);
      ret = AssignExpr.Operator.and;
      break;
    case XORASSIGN:
      jj_consume_token(XORASSIGN);
      ret = AssignExpr.Operator.xor;
      break;
    case ORASSIGN:
      jj_consume_token(ORASSIGN);
      ret = AssignExpr.Operator.or;
      break;
    default:
      jj_la1[65] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalExpression() throws ParseException {
  Expression ret;
  Expression left;
  Expression right;
    ret = ConditionalOrExpression();
    switch (jj_nt.kind) {
    case HOOK:
      jj_consume_token(HOOK);
      left = Expression();
      jj_consume_token(COLON);
      right = ConditionalExpression();
      ret = new ConditionalExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, left, right);
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalOrExpression() throws ParseException {
  Expression ret;
  Expression right;
    ret = ConditionalAndExpression();
    label_29:
    while (true) {
      switch (jj_nt.kind) {
      case SC_OR:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_29;
      }
      jj_consume_token(SC_OR);
      right = ConditionalAndExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.or);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConditionalAndExpression() throws ParseException {
  Expression ret;
  Expression right;
    ret = InclusiveOrExpression();
    label_30:
    while (true) {
      switch (jj_nt.kind) {
      case SC_AND:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_30;
      }
      jj_consume_token(SC_AND);
      right = InclusiveOrExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.and);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InclusiveOrExpression() throws ParseException {
  Expression ret;
  Expression right;
    ret = ExclusiveOrExpression();
    label_31:
    while (true) {
      switch (jj_nt.kind) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[69] = jj_gen;
        break label_31;
      }
      jj_consume_token(BIT_OR);
      right = ExclusiveOrExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.binOr);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExclusiveOrExpression() throws ParseException {
  Expression ret;
  Expression right;
    ret = AndExpression();
    label_32:
    while (true) {
      switch (jj_nt.kind) {
      case XOR:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_32;
      }
      jj_consume_token(XOR);
      right = AndExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.xor);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {
  Expression ret;
  Expression right;
    ret = EqualityExpression();
    label_33:
    while (true) {
      switch (jj_nt.kind) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[71] = jj_gen;
        break label_33;
      }
      jj_consume_token(BIT_AND);
      right = EqualityExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, BinaryExpr.Operator.binAnd);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression EqualityExpression() throws ParseException {
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
    ret = InstanceOfExpression();
    label_34:
    while (true) {
      switch (jj_nt.kind) {
      case EQ:
      case NE:
        ;
        break;
      default:
        jj_la1[72] = jj_gen;
        break label_34;
      }
      switch (jj_nt.kind) {
      case EQ:
        jj_consume_token(EQ);
        op = BinaryExpr.Operator.equals;
        break;
      case NE:
        jj_consume_token(NE);
        op = BinaryExpr.Operator.notEquals;
        break;
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = InstanceOfExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InstanceOfExpression() throws ParseException {
  Expression ret;
  Type type;
    ret = RelationalExpression();
    switch (jj_nt.kind) {
    case INSTANCEOF:
      jj_consume_token(INSTANCEOF);
      type = Type();
      ret = new InstanceOfExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, type);
      break;
    default:
      jj_la1[74] = jj_gen;
      ;
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RelationalExpression() throws ParseException {
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
    ret = ShiftExpression();
    label_35:
    while (true) {
      switch (jj_nt.kind) {
      case LT:
      case LE:
      case GE:
      case GT:
        ;
        break;
      default:
        jj_la1[75] = jj_gen;
        break label_35;
      }
      switch (jj_nt.kind) {
      case LT:
        jj_consume_token(LT);
        op = BinaryExpr.Operator.less;
        break;
      case GT:
        jj_consume_token(GT);
        op = BinaryExpr.Operator.greater;
        break;
      case LE:
        jj_consume_token(LE);
        op = BinaryExpr.Operator.lessEquals;
        break;
      case GE:
        jj_consume_token(GE);
        op = BinaryExpr.Operator.greaterEquals;
        break;
      default:
        jj_la1[76] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = ShiftExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ShiftExpression() throws ParseException {
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
    ret = AdditiveExpression();
    label_36:
    while (true) {
      if (jj_2_29(1)) {
        ;
      } else {
        break label_36;
      }
      switch (jj_nt.kind) {
      case LSHIFT:
        jj_consume_token(LSHIFT);
        op = BinaryExpr.Operator.lShift;
        break;
      default:
        jj_la1[77] = jj_gen;
        if (jj_2_30(1)) {
          RSIGNEDSHIFT();
        op = BinaryExpr.Operator.rSignedShift;
        } else if (jj_2_31(1)) {
          RUNSIGNEDSHIFT();
        op = BinaryExpr.Operator.rUnsignedShift;
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      right = AdditiveExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
    ret = MultiplicativeExpression();
    label_37:
    while (true) {
      switch (jj_nt.kind) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[78] = jj_gen;
        break label_37;
      }
      switch (jj_nt.kind) {
      case PLUS:
        jj_consume_token(PLUS);
        op = BinaryExpr.Operator.plus;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        op = BinaryExpr.Operator.minus;
        break;
      default:
        jj_la1[79] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = MultiplicativeExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {
  Expression ret;
  Expression right;
  BinaryExpr.Operator op;
    ret = UnaryExpression();
    label_38:
    while (true) {
      switch (jj_nt.kind) {
      case SLASH:
      case REM:
      case 145:
        ;
        break;
      default:
        jj_la1[80] = jj_gen;
        break label_38;
      }
      switch (jj_nt.kind) {
      case 145:
        jj_consume_token(145);
        op = BinaryExpr.Operator.times;
        break;
      case SLASH:
        jj_consume_token(SLASH);
        op = BinaryExpr.Operator.divide;
        break;
      case REM:
        jj_consume_token(REM);
        op = BinaryExpr.Operator.remainder;
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      right = UnaryExpression();
      ret = new BinaryExpr(ret.getBeginLine(), ret.getBeginColumn(), ret, right, op);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpression() throws ParseException {
  Expression ret;
  UnaryExpr.Operator op;
  int line = 0;
  int column = 0;
    switch (jj_nt.kind) {
    case PLUS:
    case MINUS:
      switch (jj_nt.kind) {
      case PLUS:
        jj_consume_token(PLUS);
        op = UnaryExpr.Operator.positive;
        line = token.beginLine;
        column = token.beginColumn;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        op = UnaryExpr.Operator.negative;
        line = token.beginLine;
        column = token.beginColumn;
        break;
      default:
        jj_la1[82] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ret = UnaryExpression();
      if (op == UnaryExpr.Operator.negative)
      {
        if (ret instanceof IntegerLiteralExpr && ((IntegerLiteralExpr) ret).isMinValue())
        {
          ret = new IntegerLiteralMinValueExpr(ret.getBeginLine(), ret.getBeginColumn());
        }
        else if (ret instanceof LongLiteralExpr && ((LongLiteralExpr) ret).isMinValue())
        {
          ret = new LongLiteralMinValueExpr(ret.getBeginLine(), ret.getBeginColumn());
        }
        else
        {
          ret = new UnaryExpr(line, column, ret, op);
        }
      }
      else
      {
        ret = new UnaryExpr(line, column, ret, op);
      }
      break;
    case INCR:
      ret = PreIncrementExpression();
      break;
    case DECR:
      ret = PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
    case BANG:
    case TILDE:
      ret = UnaryExpressionNotPlusMinus();
      break;
    default:
      jj_la1[83] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PreIncrementExpression() throws ParseException {
  Expression ret;
  int line;
  int column;
    jj_consume_token(INCR);
    line = token.beginLine;
    column = token.beginColumn;
    ret = PrimaryExpression();
    ret = new UnaryExpr(line, column, ret, UnaryExpr.Operator.preIncrement);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PreDecrementExpression() throws ParseException {
  Expression ret;
  int line;
  int column;
    jj_consume_token(DECR);
    line = token.beginLine;
    column = token.beginColumn;
    ret = PrimaryExpression();
    ret = new UnaryExpr(line, column, ret, UnaryExpr.Operator.preDecrement);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression UnaryExpressionNotPlusMinus() throws ParseException {
  Expression ret;
  UnaryExpr.Operator op;
  int line = 0;
  int column = 0;
    switch (jj_nt.kind) {
    case BANG:
    case TILDE:
      switch (jj_nt.kind) {
      case TILDE:
        jj_consume_token(TILDE);
        op = UnaryExpr.Operator.inverse;
        line = token.beginLine;
        column = token.beginColumn;
        break;
      case BANG:
        jj_consume_token(BANG);
        op = UnaryExpr.Operator.not;
        line = token.beginLine;
        column = token.beginColumn;
        break;
      default:
        jj_la1[84] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ret = UnaryExpression();
      ret = new UnaryExpr(line, column, ret, op);
      break;
    default:
      jj_la1[85] = jj_gen;
      if (jj_2_32(2147483647)) {
        ret = CastExpression();
      } else {
        switch (jj_nt.kind) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case NEW:
        case INT:
        case LONG:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDPATTERN:
        case LPAREN:
          ret = PostfixExpression();
          break;
        default:
          jj_la1[86] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {
    if (jj_2_33(2147483647)) {
      jj_consume_token(LPAREN);
      Type();
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
    } else {
      switch (jj_nt.kind) {
      case LPAREN:
        jj_consume_token(LPAREN);
        Type();
        jj_consume_token(RPAREN);
        UnaryExpression();
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public Expression PostfixExpression() throws ParseException {
  Expression ret;
  UnaryExpr.Operator op;
  int line = 0;
  int column = 0;
    ret = PrimaryExpression();
    if (jj_2_34(2)) {
      switch (jj_nt.kind) {
      case INCR:
        jj_consume_token(INCR);
        op = UnaryExpr.Operator.posIncrement;
        line = token.beginLine;
        column = token.beginColumn;
        break;
      case DECR:
        jj_consume_token(DECR);
        op = UnaryExpr.Operator.posDecrement;
        line = token.beginLine;
        column = token.beginColumn;
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ret = new UnaryExpr(line, column, ret, op);
    } else {
      ;
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CastExpression() throws ParseException {
  Expression ret;
  Type type;
  int line;
  int column;
    jj_consume_token(LPAREN);
    line = token.beginLine;
    column = token.beginColumn;
    type = Type();
    jj_consume_token(RPAREN);
    ret = UnaryExpression();
    ret = new CastExpr(line, column, type, ret);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {
  Expression ret;
  Expression inner;
    ret = PrimaryPrefix();
    label_39:
    while (true) {
      if (jj_2_35(2)) {
        ;
      } else {
        break label_39;
      }
      ret = PrimarySuffix(ret);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpressionWithoutSuperSuffix() throws ParseException {
  Expression ret;
  Expression inner;
    ret = PrimaryPrefix();
    label_40:
    while (true) {
      if (jj_2_36(2147483647)) {
        ;
      } else {
        break label_40;
      }
      ret = PrimarySuffixWithoutSuper(ret);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryPrefix() throws ParseException {
  Expression ret;
  String name;
  List typeArgs = null;
  List args = null;
  boolean hasArgs = false;
  Type type;
  int line =-1;
  int column = 0;
    switch (jj_nt.kind) {
    case FALSE:
    case NULL:
    case TRUE:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      ret = Literal();
      break;
    case THIS:
      jj_consume_token(THIS);
      ret = new ThisExpr(token.beginLine, token.beginColumn, null);
      break;
    case SUPER:
      jj_consume_token(SUPER);
      ret = new SuperExpr(token.beginLine, token.beginColumn, null);
      jj_consume_token(DOT);
      switch (jj_nt.kind) {
      case LT:
        typeArgs = TypeArguments();
        line = ((Type) typeArgs.get(0)).getBeginLine();
        column = ((Type) typeArgs.get(0)).getBeginColumn();
        break;
      default:
        jj_la1[89] = jj_gen;
        ;
      }
      jj_consume_token(IDPATTERN);
      name = token.image;
      if (line == - 1)
      {
        line = token.beginLine;
        column = token.beginColumn;
      }
      switch (jj_nt.kind) {
      case LPAREN:
        args = Arguments();
        hasArgs = true;
        break;
      default:
        jj_la1[90] = jj_gen;
        ;
      }
      ret = hasArgs ? new MethodCallExpr(line, column, ret, typeArgs, name, args) : new FieldAccessExpr(line, column, ret, null, name);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      line = token.beginLine;
      column = token.beginColumn;
      ret = Expression();
      jj_consume_token(RPAREN);
      ret = new EnclosedExpr(line, column, ret);
      break;
    case NEW:
      ret = AllocationExpression(null);
      break;
    default:
      jj_la1[92] = jj_gen;
      if (jj_2_37(2147483647)) {
        type = ResultType();
        jj_consume_token(DOT);
        jj_consume_token(CLASS);
      ret = new ClassExpr(type.getBeginLine(), type.getBeginColumn(), type);
      } else {
        switch (jj_nt.kind) {
        case IDPATTERN:
          jj_consume_token(IDPATTERN);
      name = token.image;
      line = token.beginLine;
      column = token.beginColumn;
          switch (jj_nt.kind) {
          case LPAREN:
            args = Arguments();
        hasArgs = true;
            break;
          default:
            jj_la1[91] = jj_gen;
            ;
          }
      ret = hasArgs ? new MethodCallExpr(line, column, null, null, name, args) : new NameExpr(line, column, name);
          break;
        default:
          jj_la1[93] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimarySuffix(Expression scope) throws ParseException {
  Expression ret;
    if (jj_2_38(2)) {
      ret = PrimarySuffixWithoutSuper(scope);
    } else {
      switch (jj_nt.kind) {
      case DOT:
        jj_consume_token(DOT);
        jj_consume_token(SUPER);
      ret = new SuperExpr(token.beginLine, token.beginColumn, scope);
        break;
      default:
        jj_la1[94] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimarySuffixWithoutSuper(Expression scope) throws ParseException {
  Expression ret;
  List typeArgs = null;
  List args = null;
  boolean hasArgs = false;
  String name;
  int line =-1;
  int column = 0;
    switch (jj_nt.kind) {
    case DOT:
      jj_consume_token(DOT);
      switch (jj_nt.kind) {
      case THIS:
        jj_consume_token(THIS);
        ret = new ThisExpr(token.beginLine, token.beginColumn, scope);
        break;
      case NEW:
        ret = AllocationExpression(scope);
        break;
      default:
        jj_la1[97] = jj_gen;
        if (jj_2_39(2147483647)) {
          switch (jj_nt.kind) {
          case LT:
            typeArgs = TypeArguments();
          line = ((Type)typeArgs.get(0)).getBeginLine();
          column = ((Type) typeArgs.get(0)).getBeginColumn();
            break;
          default:
            jj_la1[95] = jj_gen;
            ;
          }
          jj_consume_token(IDPATTERN);
        name = token.image;
        if (line == - 1)
        {
          line = token.beginLine;
          column = token.beginColumn;
        }
          switch (jj_nt.kind) {
          case LPAREN:
            args = Arguments();
          hasArgs = true;
            break;
          default:
            jj_la1[96] = jj_gen;
            ;
          }
        ret = hasArgs ? new MethodCallExpr(line, column, scope, typeArgs, name, args) : new FieldAccessExpr(line, column, scope, typeArgs, name);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case LBRACKET:
      jj_consume_token(LBRACKET);
      line = token.beginLine;
      column = token.beginColumn;
      ret = Expression();
      jj_consume_token(RBRACKET);
      ret = new ArrayAccessExpr(line, column, scope, ret);
      break;
    default:
      jj_la1[98] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Literal() throws ParseException {
  Expression ret;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      ret = new IntegerLiteralExpr(token.beginLine, token.beginColumn, token.image);
      break;
    case LONG_LITERAL:
      jj_consume_token(LONG_LITERAL);
      ret = new LongLiteralExpr(token.beginLine, token.beginColumn, token.image);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      ret = new DoubleLiteralExpr(token.beginLine, token.beginColumn, token.image);
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      ret = new CharLiteralExpr(token.beginLine, token.beginColumn, token.image.substring(1, token.image.length() - 1));
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      ret = new StringLiteralExpr(token.beginLine, token.beginColumn, token.image.substring(1, token.image.length() - 1));
      break;
    case FALSE:
    case TRUE:
      ret = BooleanLiteral();
      break;
    case NULL:
      ret = NullLiteral();
      break;
    default:
      jj_la1[99] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BooleanLiteral() throws ParseException {
  Expression ret;
    switch (jj_nt.kind) {
    case TRUE:
      jj_consume_token(TRUE);
      ret = new BooleanLiteralExpr(token.beginLine, token.beginColumn, Boolean.TRUE);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      ret = new BooleanLiteralExpr(token.beginLine, token.beginColumn, Boolean.FALSE);
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression NullLiteral() throws ParseException {
    jj_consume_token(NULL);
    {if (true) return new NullLiteralExpr(token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public List Arguments() throws ParseException {
  List ret = null;
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ret = ArgumentList();
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ArgumentList() throws ParseException {
  List ret = new LinkedList();
  Expression expr;
    expr = Expression();
    ret.add(expr);
    label_41:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[102] = jj_gen;
        break label_41;
      }
      jj_consume_token(COMMA);
      expr = Expression();
      ret.add(expr);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AllocationExpression(Expression scope) throws ParseException {
  Expression ret;
  Type type;
  Object [ ] arr = null;
  List typeArgs = null;
  List anonymousBody = null;
  List args;
  int line;
  int column;
    jj_consume_token(NEW);
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
      type = PrimitiveType();
      arr = ArrayDimsAndInits();
      if (arr [ 0 ] instanceof Integer)
      {
        ret = new ArrayCreationExpr(line, column, type, null, ((Integer) arr [ 0 ]).intValue(), (ArrayInitializerExpr) arr [ 1 ]);
      }
      else
      {
        ret = new ArrayCreationExpr(line, column, type, null, (List) arr [ 0 ], ((Integer) arr [ 1 ]).intValue());
      }
      break;
    case IDPATTERN:
    case LT:
      switch (jj_nt.kind) {
      case LT:
        typeArgs = TypeArguments();
        break;
      default:
        jj_la1[103] = jj_gen;
        ;
      }
      type = ClassOrInterfaceType();
      switch (jj_nt.kind) {
      case LBRACKET:
        arr = ArrayDimsAndInits();
        if (arr [ 0 ] instanceof Integer)
        {
          ret = new ArrayCreationExpr(line, column, type, typeArgs, ((Integer) arr [ 0 ]).intValue(), (ArrayInitializerExpr) arr [ 1 ]);
        }
        else
        {
          ret = new ArrayCreationExpr(line, column, type, typeArgs, (List) arr [ 0 ], ((Integer) arr [ 1 ]).intValue());
        }
        break;
      case LPAREN:
        args = Arguments();
        if (jj_2_40(2)) {
          jj_consume_token(LBRACE);
          anonymousBody = ClassOrInterfaceBody(false);
          jj_consume_token(RBRACE);
        } else {
          ;
        }
        ret = new ObjectCreationExpr(line, column, scope, (ClassOrInterfaceType) type, typeArgs, args, anonymousBody);
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[105] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public Object [ ] ArrayDimsAndInits() throws ParseException {
  Object [ ] ret = new Object [ 2 ];
  Expression expr;
  List inits = null;
  int i = 0;
    if (jj_2_43(2)) {
      label_42:
      while (true) {
        jj_consume_token(LBRACKET);
        expr = Expression();
        inits = add(inits, expr);
        jj_consume_token(RBRACKET);
        if (jj_2_41(2)) {
          ;
        } else {
          break label_42;
        }
      }
      label_43:
      while (true) {
        if (jj_2_42(2)) {
          ;
        } else {
          break label_43;
        }
        jj_consume_token(LBRACKET);
        jj_consume_token(RBRACKET);
        i++;
      }
      ret [ 0 ] = inits;
      ret [ 1 ] = new Integer(i);
    } else {
      switch (jj_nt.kind) {
      case LBRACKET:
        label_44:
        while (true) {
          jj_consume_token(LBRACKET);
          jj_consume_token(RBRACKET);
      i++;
          switch (jj_nt.kind) {
          case LBRACKET:
            ;
            break;
          default:
            jj_la1[106] = jj_gen;
            break label_44;
          }
        }
        expr = ArrayInitializer();
      ret [ 0 ] = new Integer(i);
      ret [ 1 ] = expr;
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

/*
 * Statement syntax follows.
 */
  final public Statement Statement() throws ParseException {
  Statement ret;
    if (jj_2_44(2)) {
      ret = LabeledStatement();
    } else {
      switch (jj_nt.kind) {
      case ASSERT:
        ret = AssertStatement();
        break;
      case LBRACE:
        ret = Block();
        break;
      case SEMICOLON:
        ret = EmptyStatement();
        break;
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case NEW:
      case INT:
      case LONG:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDPATTERN:
      case LPAREN:
      case INCR:
      case DECR:
        ret = StatementExpression();
        break;
      case SWITCH:
        ret = SwitchStatement();
        break;
      case IF:
        ret = IfStatement();
        break;
      case WHILE:
        ret = WhileStatement();
        break;
      case DO:
        ret = DoStatement();
        break;
      case FOR:
        ret = ForStatement();
        break;
      case BREAK:
        ret = BreakStatement();
        break;
      case CONTINUE:
        ret = ContinueStatement();
        break;
      case RETURN:
        ret = ReturnStatement();
        break;
      case THROW:
        ret = ThrowStatement();
        break;
      case SYNCHRONIZED:
        ret = SynchronizedStatement();
        break;
      case TRY:
        ret = TryStatement();
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public AssertStmt AssertStatement() throws ParseException {
  Expression check;
  Expression msg = null;
  int line;
  int column;
    jj_consume_token(ASSERT);
    line = token.beginLine;
    column = token.beginColumn;
    check = Expression();
    switch (jj_nt.kind) {
    case COLON:
      jj_consume_token(COLON);
      msg = Expression();
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new AssertStmt(line, column, check, msg);}
    throw new Error("Missing return statement in function");
  }

  final public LabeledStmt LabeledStatement() throws ParseException {
  String label;
  Statement stmt;
  int line;
  int column;
    jj_consume_token(IDPATTERN);
    line = token.beginLine;
    column = token.beginColumn;
    label = token.image;
    jj_consume_token(COLON);
    stmt = Statement();
    {if (true) return new LabeledStmt(line, column, label, stmt);}
    throw new Error("Missing return statement in function");
  }

  final public BlockStmt Block() throws ParseException {
  List stmts;
  int beginLine;
  int beginColumn;
  int endLine;
  int endColumn;
    jj_consume_token(LBRACE);
    beginLine = token.beginLine;
    beginColumn = token.beginColumn;
    stmts = Statements();
    jj_consume_token(RBRACE);
    endLine = token.beginLine;
    endColumn = token.beginColumn;
    {if (true) return new BlockStmt(beginLine, beginColumn, endLine, endColumn, stmts);}
    throw new Error("Missing return statement in function");
  }

/*
 * Classes inside block stametents can only be abstract or final. The semantic must check it. 
 */
  final public Statement BlockStatement() throws ParseException {
  Statement ret;
  Expression expr;
  ClassOrInterfaceDeclaration typeDecl;
  Modifier modifier;
    if (jj_2_45(2147483647)) {
      modifier = Modifiers();
      typeDecl = ClassOrInterfaceDeclaration(modifier);
      ret = new TypeDeclarationStmt(typeDecl.getBeginLine(), typeDecl.getBeginColumn(), typeDecl);
    } else if (jj_2_46(2147483647)) {
      expr = VariableDeclarationExpression();
      ret = new ExpressionStmt(expr.getBeginLine(), expr.getBeginColumn(), expr);
      jj_consume_token(SEMICOLON);
    } else {
      switch (jj_nt.kind) {
      case ASSERT:
      case BOOLEAN:
      case BREAK:
      case BYTE:
      case CHAR:
      case CONTINUE:
      case DO:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case FOR:
      case NEW:
      case IF:
      case INT:
      case LONG:
      case NULL:
      case RETURN:
      case SHORT:
      case SUPER:
      case SWITCH:
      case SYNCHRONIZED:
      case THIS:
      case THROW:
      case TRUE:
      case TRY:
      case VOID:
      case WHILE:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDPATTERN:
      case LPAREN:
      case LBRACE:
      case SEMICOLON:
      case INCR:
      case DECR:
        ret = Statement();
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public VariableDeclarationExpr VariableDeclarationExpression() throws ParseException {
  Modifier modifier;
  Type type;
  List vars = new LinkedList();
  VariableDeclarator var;
    modifier = Modifiers();
    type = Type();
    var = VariableDeclarator();
    vars.add(var);
    label_45:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[111] = jj_gen;
        break label_45;
      }
      jj_consume_token(COMMA);
      var = VariableDeclarator();
      vars.add(var);
    }
    {if (true) return new VariableDeclarationExpr(type.getBeginLine(), type.getBeginColumn(), modifier.modifiers, modifier.annotations, type, vars);}
    throw new Error("Missing return statement in function");
  }

  final public EmptyStmt EmptyStatement() throws ParseException {
    jj_consume_token(SEMICOLON);
    {if (true) return new EmptyStmt(token.beginLine, token.beginColumn);}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionStmt StatementExpression() throws ParseException {
  Expression expr;
  AssignExpr.Operator op;
  Expression value;
    switch (jj_nt.kind) {
    case INCR:
      expr = PreIncrementExpression();
      break;
    case DECR:
      expr = PreDecrementExpression();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
      expr = PrimaryExpression();
      switch (jj_nt.kind) {
      case ASSIGN:
      case INCR:
      case DECR:
      case PLUSASSIGN:
      case MINUSASSIGN:
      case STARASSIGN:
      case SLASHASSIGN:
      case ANDASSIGN:
      case ORASSIGN:
      case XORASSIGN:
      case REMASSIGN:
      case LSHIFTASSIGN:
      case RSIGNEDSHIFTASSIGN:
      case RUNSIGNEDSHIFTASSIGN:
        switch (jj_nt.kind) {
        case INCR:
          jj_consume_token(INCR);
        expr = new UnaryExpr(expr.getBeginLine(), expr.getBeginColumn(), expr, UnaryExpr.Operator.posIncrement);
          break;
        case DECR:
          jj_consume_token(DECR);
        expr = new UnaryExpr(expr.getBeginLine(), expr.getBeginColumn(), expr, UnaryExpr.Operator.posDecrement);
          break;
        case ASSIGN:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:
          op = AssignmentOperator();
          value = Expression();
        expr = new AssignExpr(expr.getBeginLine(), expr.getBeginColumn(), expr, value, op);
          break;
        default:
          jj_la1[112] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[113] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new ExpressionStmt(expr.getBeginLine(), expr.getBeginColumn(), expr);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchStmt SwitchStatement() throws ParseException {
  Expression selector;
  SwitchEntryStmt entry;
  List entries = null;
  int line;
  int column;
    jj_consume_token(SWITCH);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    selector = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    label_46:
    while (true) {
      switch (jj_nt.kind) {
      case CASE:
      case _DEFAULT:
        ;
        break;
      default:
        jj_la1[115] = jj_gen;
        break label_46;
      }
      entry = SwitchEntry();
      entries = add(entries, entry);
    }
    jj_consume_token(RBRACE);
    {if (true) return new SwitchStmt(line, column, selector, entries);}
    throw new Error("Missing return statement in function");
  }

  final public SwitchEntryStmt SwitchEntry() throws ParseException {
  Expression label = null;
  List stmts;
  int line;
  int column;
    switch (jj_nt.kind) {
    case CASE:
      jj_consume_token(CASE);
      line = token.beginLine;
      column = token.beginColumn;
      label = Expression();
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      line = token.beginLine;
      column = token.beginColumn;
      break;
    default:
      jj_la1[116] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
    stmts = Statements();
    {if (true) return new SwitchEntryStmt(line, column, label, stmts);}
    throw new Error("Missing return statement in function");
  }

  final public IfStmt IfStatement() throws ParseException {
  Expression condition;
  Statement thenStmt;
  Statement elseStmt = null;
  int line;
  int column;
    jj_consume_token(IF);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    thenStmt = Statement();
    switch (jj_nt.kind) {
    case ELSE:
      jj_consume_token(ELSE);
      elseStmt = Statement();
      break;
    default:
      jj_la1[117] = jj_gen;
      ;
    }
    {if (true) return new IfStmt(line, column, condition, thenStmt, elseStmt);}
    throw new Error("Missing return statement in function");
  }

  final public WhileStmt WhileStatement() throws ParseException {
  Expression condition;
  Statement body;
  int line;
  int column;
    jj_consume_token(WHILE);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    body = Statement();
    {if (true) return new WhileStmt(line, column, condition, body);}
    throw new Error("Missing return statement in function");
  }

  final public DoStmt DoStatement() throws ParseException {
  Expression condition;
  Statement body;
  int line;
  int column;
    jj_consume_token(DO);
    line = token.beginLine;
    column = token.beginColumn;
    body = Statement();
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    condition = Expression();
    jj_consume_token(RPAREN);
    jj_consume_token(SEMICOLON);
    {if (true) return new DoStmt(line, column, body, condition);}
    throw new Error("Missing return statement in function");
  }

  final public Statement ForStatement() throws ParseException {
  String id = null;
  VariableDeclarationExpr varExpr = null;
  Expression expr = null;
  List init = null;
  List update = null;
  Statement body;
  int line;
  int column;
    jj_consume_token(FOR);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    if (jj_2_47(2147483647)) {
      varExpr = VariableDeclarationExpression();
      jj_consume_token(COLON);
      expr = Expression();
    } else {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FINAL:
      case FLOAT:
      case NEW:
      case INT:
      case LONG:
      case NATIVE:
      case NULL:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SUPER:
      case SYNCHRONIZED:
      case THIS:
      case TRANSIENT:
      case TRUE:
      case VOID:
      case VOLATILE:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDPATTERN:
      case LPAREN:
      case SEMICOLON:
      case AT:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        switch (jj_nt.kind) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case NEW:
        case INT:
        case LONG:
        case NATIVE:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDPATTERN:
        case LPAREN:
        case AT:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          init = ForInit();
          break;
        default:
          jj_la1[118] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch (jj_nt.kind) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case NEW:
        case INT:
        case LONG:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDPATTERN:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          expr = Expression();
          break;
        default:
          jj_la1[119] = jj_gen;
          ;
        }
        jj_consume_token(SEMICOLON);
        switch (jj_nt.kind) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case NEW:
        case INT:
        case LONG:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case LONG_LITERAL:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDPATTERN:
        case LPAREN:
        case BANG:
        case TILDE:
        case INCR:
        case DECR:
        case PLUS:
        case MINUS:
          update = ForUpdate();
          break;
        default:
          jj_la1[120] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(RPAREN);
    body = Statement();
    if (varExpr != null)
    {
      {if (true) return new ForeachStmt(line, column, varExpr, expr, body);}
    }
    {if (true) return new ForStmt(line, column, init, expr, update, body);}
    throw new Error("Missing return statement in function");
  }

  final public List ForInit() throws ParseException {
  List ret;
  Expression expr;
    if (jj_2_48(2147483647)) {
      expr = VariableDeclarationExpression();
      ret = new LinkedList();
      ret.add(expr);
    } else {
      switch (jj_nt.kind) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case NEW:
      case INT:
      case LONG:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case LONG_LITERAL:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDPATTERN:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:
        ret = ExpressionList();
        break;
      default:
        jj_la1[122] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ExpressionList() throws ParseException {
  List ret = new LinkedList();
  Expression expr;
    expr = Expression();
    ret.add(expr);
    label_47:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_47;
      }
      jj_consume_token(COMMA);
      expr = Expression();
      ret.add(expr);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List ForUpdate() throws ParseException {
  List ret;
    ret = ExpressionList();
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BreakStmt BreakStatement() throws ParseException {
  String id = null;
  int line;
  int column;
    jj_consume_token(BREAK);
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case IDPATTERN:
      jj_consume_token(IDPATTERN);
      id = token.image;
      break;
    default:
      jj_la1[124] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new BreakStmt(line, column, id);}
    throw new Error("Missing return statement in function");
  }

  final public ContinueStmt ContinueStatement() throws ParseException {
  String id = null;
  int line;
  int column;
    jj_consume_token(CONTINUE);
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case IDPATTERN:
      jj_consume_token(IDPATTERN);
      id = token.image;
      break;
    default:
      jj_la1[125] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new ContinueStmt(line, column, id);}
    throw new Error("Missing return statement in function");
  }

  final public ReturnStmt ReturnStatement() throws ParseException {
  Expression expr = null;
  int line;
  int column;
    jj_consume_token(RETURN);
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      expr = Expression();
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new ReturnStmt(line, column, expr);}
    throw new Error("Missing return statement in function");
  }

  final public ThrowStmt ThrowStatement() throws ParseException {
  Expression expr;
  int line;
  int column;
    jj_consume_token(THROW);
    line = token.beginLine;
    column = token.beginColumn;
    expr = Expression();
    jj_consume_token(SEMICOLON);
    {if (true) return new ThrowStmt(line, column, expr);}
    throw new Error("Missing return statement in function");
  }

  final public SynchronizedStmt SynchronizedStatement() throws ParseException {
  Expression expr;
  BlockStmt block;
  int line;
  int column;
    jj_consume_token(SYNCHRONIZED);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(LPAREN);
    expr = Expression();
    jj_consume_token(RPAREN);
    block = Block();
    {if (true) return new SynchronizedStmt(line, column, expr, block);}
    throw new Error("Missing return statement in function");
  }

  final public TryStmt TryStatement() throws ParseException {
  BlockStmt tryBlock;
  BlockStmt finallyBlock = null;
  List catchs = null;
  Parameter except;
  BlockStmt catchBlock;
  int line;
  int column;
  int cLine;
  int cColumn;
    jj_consume_token(TRY);
    line = token.beginLine;
    column = token.beginColumn;
    tryBlock = Block();
    switch (jj_nt.kind) {
    case CATCH:
      label_48:
      while (true) {
        jj_consume_token(CATCH);
        cLine = token.beginLine;
        cColumn = token.beginColumn;
        jj_consume_token(LPAREN);
        except = FormalParameter();
        jj_consume_token(RPAREN);
        catchBlock = Block();
        catchs = add(catchs, new CatchClause(cLine, cColumn, except, catchBlock));
        switch (jj_nt.kind) {
        case CATCH:
          ;
          break;
        default:
          jj_la1[127] = jj_gen;
          break label_48;
        }
      }
      switch (jj_nt.kind) {
      case FINALLY:
        jj_consume_token(FINALLY);
        finallyBlock = Block();
        break;
      default:
        jj_la1[128] = jj_gen;
        ;
      }
      break;
    case FINALLY:
      jj_consume_token(FINALLY);
      finallyBlock = Block();
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new TryStmt(line, column, tryBlock, catchs, finallyBlock);}
    throw new Error("Missing return statement in function");
  }

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public void RUNSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT && ((Token.GTToken) getToken(1)).realKind == RUNSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

  final public void RSIGNEDSHIFT() throws ParseException {
    if (getToken(1).kind == GT && ((Token.GTToken) getToken(1)).realKind == RSIGNEDSHIFT) {

    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(GT);
    jj_consume_token(GT);
  }

/* Annotation syntax follows. */
  final public AnnotationExpr Annotation() throws ParseException {
  AnnotationExpr ret;
    if (jj_2_49(2147483647)) {
      ret = NormalAnnotation();
    } else if (jj_2_50(2147483647)) {
      ret = SingleMemberAnnotation();
    } else {
      switch (jj_nt.kind) {
      case AT:
        ret = MarkerAnnotation();
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public NormalAnnotationExpr NormalAnnotation() throws ParseException {
  NameExpr name;
  List pairs = null;
  int line;
  int column;
    jj_consume_token(AT);
    line = token.beginLine;
    column = token.beginColumn;
    name = Name();
    jj_consume_token(LPAREN);
    switch (jj_nt.kind) {
    case IDPATTERN:
      pairs = MemberValuePairs();
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return new NormalAnnotationExpr(line, column, name, pairs);}
    throw new Error("Missing return statement in function");
  }

  final public MarkerAnnotationExpr MarkerAnnotation() throws ParseException {
  NameExpr name;
  int line;
  int column;
    jj_consume_token(AT);
    line = token.beginLine;
    column = token.beginColumn;
    name = Name();
    {if (true) return new MarkerAnnotationExpr(line, column, name);}
    throw new Error("Missing return statement in function");
  }

  final public SingleMemberAnnotationExpr SingleMemberAnnotation() throws ParseException {
  NameExpr name;
  Expression memberVal;
  int line;
  int column;
    jj_consume_token(AT);
    line = token.beginLine;
    column = token.beginColumn;
    name = Name();
    jj_consume_token(LPAREN);
    memberVal = MemberValue();
    jj_consume_token(RPAREN);
    {if (true) return new SingleMemberAnnotationExpr(line, column, name, memberVal);}
    throw new Error("Missing return statement in function");
  }

  final public List MemberValuePairs() throws ParseException {
  List ret = new LinkedList();
  MemberValuePair pair;
    pair = MemberValuePair();
    ret.add(pair);
    label_49:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[132] = jj_gen;
        break label_49;
      }
      jj_consume_token(COMMA);
      pair = MemberValuePair();
      ret.add(pair);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public MemberValuePair MemberValuePair() throws ParseException {
  String name;
  Expression value;
  int line;
  int column;
    jj_consume_token(IDPATTERN);
    name = token.image;
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(ASSIGN);
    value = MemberValue();
    {if (true) return new MemberValuePair(line, column, name, value);}
    throw new Error("Missing return statement in function");
  }

  final public Expression MemberValue() throws ParseException {
  Expression ret;
    switch (jj_nt.kind) {
    case AT:
      ret = Annotation();
      break;
    case LBRACE:
      ret = MemberValueArrayInitializer();
      break;
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      ret = ConditionalExpression();
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MemberValueArrayInitializer() throws ParseException {
  List ret = new LinkedList();
  Expression member;
  int line;
  int column;
    jj_consume_token(LBRACE);
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case DOUBLE:
    case FALSE:
    case FLOAT:
    case NEW:
    case INT:
    case LONG:
    case NULL:
    case SHORT:
    case SUPER:
    case THIS:
    case TRUE:
    case VOID:
    case LONG_LITERAL:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDPATTERN:
    case LPAREN:
    case LBRACE:
    case AT:
    case BANG:
    case TILDE:
    case INCR:
    case DECR:
    case PLUS:
    case MINUS:
      member = MemberValue();
      ret.add(member);
      label_50:
      while (true) {
        if (jj_2_51(2)) {
          ;
        } else {
          break label_50;
        }
        jj_consume_token(COMMA);
        member = MemberValue();
        ret.add(member);
      }
      break;
    default:
      jj_la1[134] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[135] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return new ArrayInitializerExpr(line, column, ret);}
    throw new Error("Missing return statement in function");
  }

/* Annotation Types. */
  final public AnnotationDeclaration AnnotationTypeDeclaration(Modifier modifier) throws ParseException {
  String name;
  List members;
  int line;
  int column;
    jj_consume_token(AT);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(INTERFACE);
    jj_consume_token(IDPATTERN);
    name = token.image;
    members = AnnotationTypeBody();
    {if (true) return new AnnotationDeclaration(line, column, modifier.modifiers, modifier.annotations, name, members);}
    throw new Error("Missing return statement in function");
  }

  final public List AnnotationTypeBody() throws ParseException {
  List ret = null;
  BodyDeclaration member;
    jj_consume_token(LBRACE);
    label_51:
    while (true) {
      switch (jj_nt.kind) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case CLASS:
      case DOUBLE:
      case ENUM:
      case FINAL:
      case FLOAT:
      case INT:
      case INTERFACE:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOID:
      case VOLATILE:
      case IDPATTERN:
      case SEMICOLON:
      case AT:
        ;
        break;
      default:
        jj_la1[136] = jj_gen;
        break label_51;
      }
      member = AnnotationBodyDeclaration();
      ret = add(ret, member);
    }
    jj_consume_token(RBRACE);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public BodyDeclaration AnnotationBodyDeclaration() throws ParseException {
  Modifier modifier;
  BodyDeclaration ret;
    modifier = Modifiers();
    switch (jj_nt.kind) {
    case BOOLEAN:
    case BYTE:
    case CHAR:
    case CLASS:
    case DOUBLE:
    case ENUM:
    case FLOAT:
    case INT:
    case INTERFACE:
    case LONG:
    case SHORT:
    case VOID:
    case IDPATTERN:
    case AT:
      if (jj_2_52(2147483647)) {
        ret = AnnotationTypeMemberDeclaration(modifier);
      } else {
        switch (jj_nt.kind) {
        case CLASS:
        case INTERFACE:
          ret = ClassOrInterfaceDeclaration(modifier);
          break;
        case ENUM:
          ret = EnumDeclaration(modifier);
          break;
        case AT:
          ret = AnnotationTypeDeclaration(modifier);
          break;
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:
        case VOID:
        case IDPATTERN:
          ret = FieldDeclaration(modifier);
          break;
        default:
          jj_la1[137] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      ret = new EmptyTypeDeclaration(token.beginLine, token.beginColumn);
      break;
    default:
      jj_la1[138] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public AnnotationMemberDeclaration AnnotationTypeMemberDeclaration(Modifier modifier) throws ParseException {
  Type type;
  String name;
  Expression defaultVal = null;
    type = Type();
    jj_consume_token(IDPATTERN);
    name = token.image;
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    switch (jj_nt.kind) {
    case _DEFAULT:
      defaultVal = DefaultValue();
      break;
    default:
      jj_la1[139] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return new AnnotationMemberDeclaration(type.getBeginLine(), type.getBeginColumn(), modifier.modifiers, modifier.annotations, type, name, defaultVal);}
    throw new Error("Missing return statement in function");
  }

  final public Expression DefaultValue() throws ParseException {
  Expression ret;
    jj_consume_token(_DEFAULT);
    ret = MemberValue();
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Modifier Modifiers() throws ParseException {
  int modifiers = 0;
  List annotations = null;
  AnnotationExpr ann;
    label_52:
    while (true) {
      if (jj_2_53(2)) {
        ;
      } else {
        break label_52;
      }
      switch (jj_nt.kind) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.PUBLIC, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case STATIC:
        jj_consume_token(STATIC);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.STATIC, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.PROTECTED, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.PRIVATE, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case FINAL:
        jj_consume_token(FINAL);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.FINAL, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case ABSTRACT:
        jj_consume_token(ABSTRACT);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.ABSTRACT, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case SYNCHRONIZED:
        jj_consume_token(SYNCHRONIZED);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.SYNCHRONIZED, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case NATIVE:
        jj_consume_token(NATIVE);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.NATIVE, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case TRANSIENT:
        jj_consume_token(TRANSIENT);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.TRANSIENT, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.VOLATILE, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case STRICTFP:
        jj_consume_token(STRICTFP);
        try
        {
          modifiers = ModifierSet.addModifier(modifiers, ModifierSet.STRICTFP, new javamop.parser.main_parser.Token(token));
        }
        catch (javamop.parser.main_parser.ParseException e)
        {
          {if (true) throw new ParseException(token, e.getMessage());}
        }
        break;
      case AT:
        ann = Annotation();
        annotations = add(annotations, ann);
        break;
      default:
        jj_la1[140] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return new Modifier(modifiers, annotations);}
    throw new Error("Missing return statement in function");
  }

  final public ClassOrInterfaceDeclaration ClassOrInterfaceDeclaration(Modifier modifier) throws ParseException {
  boolean isInterface = false;
  String name;
  List typePar = null;
  List extList = null;
  List impList = null;
  List members;
  int line = 0;
  int column = 0;
    switch (jj_nt.kind) {
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case INTERFACE:
      jj_consume_token(INTERFACE);
      isInterface = true;
      break;
    default:
      jj_la1[141] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(IDPATTERN);
    name = token.image;
    switch (jj_nt.kind) {
    case LT:
      typePar = TypeParameters();
      break;
    default:
      jj_la1[142] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case EXTENDS:
      extList = ExtendsList(isInterface);
      break;
    default:
      jj_la1[143] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case IMPLEMENTS:
      impList = ImplementsList(isInterface);
      break;
    default:
      jj_la1[144] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    members = ClassOrInterfaceBody(isInterface);
    jj_consume_token(RBRACE);
    {if (true) return new ClassOrInterfaceDeclaration(line, column, modifier.modifiers, modifier.annotations, isInterface, name, typePar, extList, impList, members);}
    throw new Error("Missing return statement in function");
  }

  final public EnumDeclaration EnumDeclaration(Modifier modifier) throws ParseException {
  String name;
  List impList = null;
  EnumConstantDeclaration entry;
  List entries = null;
  BodyDeclaration member;
  List members = null;
  int line;
  int column;
    jj_consume_token(ENUM);
    line = token.beginLine;
    column = token.beginColumn;
    jj_consume_token(IDPATTERN);
    name = token.image;
    switch (jj_nt.kind) {
    case IMPLEMENTS:
      impList = ImplementsList(false);
      break;
    default:
      jj_la1[145] = jj_gen;
      ;
    }
    jj_consume_token(LBRACE);
    switch (jj_nt.kind) {
    case IDPATTERN:
    case AT:
      entries = new LinkedList();
      entry = EnumConstant();
      entries.add(entry);
      label_53:
      while (true) {
        if (jj_2_54(2)) {
          ;
        } else {
          break label_53;
        }
        jj_consume_token(COMMA);
        entry = EnumConstant();
        entries.add(entry);
      }
      break;
    default:
      jj_la1[146] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case COMMA:
      jj_consume_token(COMMA);
      break;
    default:
      jj_la1[147] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      label_54:
      while (true) {
        switch (jj_nt.kind) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case ENUM:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDPATTERN:
        case LBRACE:
        case SEMICOLON:
        case AT:
        case LT:
          ;
          break;
        default:
          jj_la1[148] = jj_gen;
          break label_54;
        }
        member = ClassOrInterfaceBodyDeclaration(false);
          members = add(members, member);
      }
      break;
    default:
      jj_la1[149] = jj_gen;
      ;
    }
    jj_consume_token(RBRACE);
    {if (true) return new EnumDeclaration(line, column, modifier.modifiers, modifier.annotations, name, impList, entries, members);}
    throw new Error("Missing return statement in function");
  }

  final public List TypeParameters() throws ParseException {
  List ret = new LinkedList();
  TypeParameter tp;
    jj_consume_token(LT);
    tp = TypeParameter();
    ret.add(tp);
    label_55:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[150] = jj_gen;
        break label_55;
      }
      jj_consume_token(COMMA);
      tp = TypeParameter();
      ret.add(tp);
    }
    jj_consume_token(GT);
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public TypeParameter TypeParameter() throws ParseException {
  String name;
  List typeBound = null;
  int line;
  int column;
    jj_consume_token(IDPATTERN);
    name = token.image;
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case EXTENDS:
      typeBound = TypeBound();
      break;
    default:
      jj_la1[151] = jj_gen;
      ;
    }
    {if (true) return new TypeParameter(line, column, name, typeBound);}
    throw new Error("Missing return statement in function");
  }

  final public List ExtendsList(boolean isInterface) throws ParseException {
  boolean extendsMoreThanOne = false;
  List ret = new LinkedList();
  ClassOrInterfaceType cit;
    jj_consume_token(EXTENDS);
    cit = ClassOrInterfaceType();
    ret.add(cit);
    label_56:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[152] = jj_gen;
        break label_56;
      }
      jj_consume_token(COMMA);
      cit = ClassOrInterfaceType();
      ret.add(cit);
      extendsMoreThanOne = true;
    }
    if (extendsMoreThanOne && !isInterface) {if (true) throw new ParseException(token, "A class cannot extend more than one other class");}
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List TypeBound() throws ParseException {
  List ret = new LinkedList();
  ClassOrInterfaceType cit;
    jj_consume_token(EXTENDS);
    cit = ClassOrInterfaceType();
    ret.add(cit);
    label_57:
    while (true) {
      switch (jj_nt.kind) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_57;
      }
      jj_consume_token(BIT_AND);
      cit = ClassOrInterfaceType();
      ret.add(cit);
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public EnumConstantDeclaration EnumConstant() throws ParseException {
  List annotations = null;
  AnnotationExpr ann;
  String name;
  List args = null;
  List classBody = null;
  int line;
  int column;
    label_58:
    while (true) {
      switch (jj_nt.kind) {
      case AT:
        ;
        break;
      default:
        jj_la1[154] = jj_gen;
        break label_58;
      }
      ann = Annotation();
      annotations = add(annotations, ann);
    }
    jj_consume_token(IDPATTERN);
    name = token.image;
    line = token.beginLine;
    column = token.beginColumn;
    switch (jj_nt.kind) {
    case LPAREN:
      args = Arguments();
      break;
    default:
      jj_la1[155] = jj_gen;
      ;
    }
    switch (jj_nt.kind) {
    case LBRACE:
      jj_consume_token(LBRACE);
      classBody = ClassOrInterfaceBody(false);
      jj_consume_token(RBRACE);
      break;
    default:
      jj_la1[156] = jj_gen;
      ;
    }
    {if (true) return new EnumConstantDeclaration(line, column, annotations, name, args, classBody);}
    throw new Error("Missing return statement in function");
  }

  final public List ImplementsList(boolean isInterface) throws ParseException {
  List ret = new LinkedList();
  ClassOrInterfaceType cit;
    jj_consume_token(IMPLEMENTS);
    cit = ClassOrInterfaceType();
    ret.add(cit);
    label_59:
    while (true) {
      switch (jj_nt.kind) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[157] = jj_gen;
        break label_59;
      }
      jj_consume_token(COMMA);
      cit = ClassOrInterfaceType();
      ret.add(cit);
    }
    if (isInterface) {if (true) throw new ParseException(token, "An interface cannot implement other interfaces");}
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_236()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    return false;
  }

  private boolean jj_3R_99() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_353()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_198()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_353()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_354()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_286()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_3R_336()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_3R_170()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    if (jj_scan_token(IDPATTERN)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_287() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_3R_288()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_287()) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(AT)) return true;
    if (jj_3R_103()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_317() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_87()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    if (jj_3R_245()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_scan_token(LONG_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_151()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_317()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_152() {
    return false;
  }

  private boolean jj_3R_164() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_153() {
    return false;
  }

  private boolean jj_3R_90() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken) getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_152()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_91() {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT && ((Token.GTToken) getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_153()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_3R_300()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_302()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_434() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_426() {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_252() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) return true;
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) jj_scanpos = xsp;
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_433() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_398()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_425() {
    Token xsp;
    if (jj_3R_433()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_433()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_434()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) jj_scanpos = xsp;
    if (jj_scan_token(IDPATTERN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_242()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_129()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_425()) {
    jj_scanpos = xsp;
    if (jj_3R_426()) return true;
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) return true;
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_211()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_212()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) return true;
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_97()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_168()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_424() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_3R_97()) return true;
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_233()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_424()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) return true;
    }
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_423() {
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_423()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_235()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) return true;
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(SUPER)) return true;
    if (jj_scan_token(DOT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    if (jj_scan_token(IDPATTERN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_232()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_422() {
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_394()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_230()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_422()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_194()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_441() {
    if (jj_3R_444()) return true;
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_432() {
    if (jj_3R_441()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(IDPATTERN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_395()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_135()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_445() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_444() {
    if (jj_3R_88()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_445()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_101()) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    return false;
  }

  private boolean jj_3R_431() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_282()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_443() {
    if (jj_3R_444()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_442() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_440() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_442()) {
    jj_scanpos = xsp;
    if (jj_3R_443()) return true;
    }
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_430() {
    if (jj_3R_440()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_393()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_195()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_421() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_430()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_431()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_432()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_420() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_3R_180()) return true;
    Token xsp;
    if (jj_3_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_257()) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_420()) {
    jj_scanpos = xsp;
    if (jj_3R_421()) return true;
    }
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_277()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_279()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_219()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_295()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) return true;
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_303()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_180()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_387()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(LT)) return true;
    if (jj_3R_178()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_179()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_3R_312()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_388()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_296() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) return true;
    }
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_274() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) {
    jj_scanpos = xsp;
    if (jj_3R_298()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_419() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_209()) jj_scanpos = xsp;
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_228()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_386()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_303()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_419()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_387()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_372()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_373()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_166()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_167()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_439() {
    if (jj_scan_token(_DEFAULT)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_438() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_429() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_438()) {
    jj_scanpos = xsp;
    if (jj_3R_439()) return true;
    }
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_83()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_184()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_119()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_120()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_3R_253()) return true;
    }
    if (jj_scan_token(IDPATTERN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_3R_429()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_184()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_418()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_437() {
    if (jj_3R_87()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_436() {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_435() {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_428() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) {
    jj_scanpos = xsp;
    if (jj_3R_436()) {
    jj_scanpos = xsp;
    if (jj_3R_437()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_3R_295()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_428()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) return true;
    }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_409() {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_408() {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_scan_token(145)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) jj_scanpos = xsp;
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_3R_255()) return true;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    if (jj_3R_181()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_401() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_407()) {
    jj_scanpos = xsp;
    if (jj_3R_408()) {
    jj_scanpos = xsp;
    if (jj_3R_409()) return true;
    }
    }
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_199()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_401()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_101()) return true;
    if (jj_3R_78()) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_101()) return true;
    if (jj_3R_78()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_406()) jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3R_285() {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) return true;
    }
    if (jj_3R_367()) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) return true;
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_3R_367()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_392()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_102()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_3R_101()) return true;
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_258() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_398()) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_398()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_390()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_391()) return true;
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_3R_363()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_181()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_427() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_3R_255()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_379()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_380()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_3R_427()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_368() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_382()) {
    jj_scanpos = xsp;
    if (jj_3R_383()) {
    jj_scanpos = xsp;
    if (jj_3R_384()) {
    jj_scanpos = xsp;
    if (jj_3R_385()) return true;
    }
    }
    }
    if (jj_3R_361()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_361()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_368()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    if (jj_3_7()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_7()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_3R_358()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_364()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_3R_349()) return true;
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_347()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_346()) return true;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_3R_415()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_3R_345()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_3R_344()) return true;
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_3R_343()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_410()) {
    jj_scanpos = xsp;
    if (jj_3R_411()) {
    jj_scanpos = xsp;
    if (jj_3R_412()) {
    jj_scanpos = xsp;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_342()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_3R_341()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_339()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_404()) {
    jj_scanpos = xsp;
    if (jj_3R_405()) return true;
    }
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_337()) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_303() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) {
    jj_scanpos = xsp;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) {
    jj_scanpos = xsp;
    if (jj_3R_324()) {
    jj_scanpos = xsp;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) {
    jj_scanpos = xsp;
    if (jj_3R_327()) {
    jj_scanpos = xsp;
    if (jj_3R_328()) {
    jj_scanpos = xsp;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) {
    jj_scanpos = xsp;
    if (jj_3R_331()) {
    jj_scanpos = xsp;
    if (jj_3R_332()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3R_362() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) return true;
    }
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) return true;
    }
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_397()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_351()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_362()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_389()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_306() {
    Token xsp;
    if (jj_3R_333()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_334()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_3R_334()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_359()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(INTERFACE)) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_3R_375()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_309()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_203()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_43() {
    Token xsp;
    if (jj_3_41()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_61()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_289() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) return true;
    }
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_309()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_352()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_294()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_78()) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_3R_294()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_335()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_360()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(104)) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_184()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_78()) return true;
    if (jj_scan_token(IDPATTERN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_79()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(IDPATTERN)) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_269()) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_3R_289()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_269()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    xsp = jj_scanpos;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) return true;
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_3R_101()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_180()) return true;
    if (jj_3R_289()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(0)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public AspectJParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[158];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
      jj_la1_init_4();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x0,0x0,0x800020,0x82041280,0x0,0x82041280,0x0,0x0,0x0,0x0,0x0,0x0,0x82041280,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x102000,0x82041280,0x829432a0,0x0,0x0,0x0,0x8a441280,0x8a441280,0x0,0x0,0x0,0x0,0x0,0x0,0x828412a0,0x0,0x0,0x0,0x0,0x0,0x8a441280,0x9ec6b3e0,0x0,0x82041280,0x82041280,0x0,0x82041280,0x200000,0x200000,0x82041280,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8a441280,0x0,0x0,0x8a441280,0x0,0x0,0x0,0x0,0x0,0x8400000,0x0,0x0,0x0,0x0,0x8000000,0x0,0x400000,0x400000,0x8a441280,0x0,0x0,0x0,0x82041280,0x0,0x0,0x9e4693c0,0x0,0x9e4693c0,0x0,0x0,0x0,0x8a441280,0x10400,0x10400,0x80000,0x8ac412a0,0x8a441280,0x8a441280,0x8ac412a0,0x8a441280,0x0,0x0,0x0,0x8a441280,0x800,0x1000000,0x1000800,0x0,0x0,0x0,0x8a441280,0x8a441280,0x0,0x829432a0,0x82143280,0x82143280,0x10000,0x800020,0x2000,0x0,0x200000,0x20000000,0x20000000,0x0,0x0,0x829432a0,0x0,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x8000,0x8000,0x0,0x0,0x0,0xff000000,0x20000,0x0,0x444ce4,0x200202,0x0,0x200202,0x0,0x0,0x0,0x0,0x0,0x0,0x200202,0xff000000,0x0,0xff000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x200202,0x644ee7,0x0,0x0,0x0,0x28920a,0x28920a,0x0,0x0,0x0,0x20000,0x0,0x0,0x644ee6,0x0,0x0,0x20000,0x0,0x0,0x28920a,0xfdffef,0x400,0x200202,0x202,0x0,0x202,0x1000,0x1000,0x202,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x28920a,0x0,0x0,0x28920a,0x0,0x0,0x0,0x0,0x0,0x89008,0x0,0x0,0x0,0x0,0x8000,0x0,0x80008,0x80000,0x28920a,0x0,0x0,0x0,0x202,0x0,0x0,0xb9f30a,0x0,0xb9f30a,0x0,0x0,0x0,0x28920a,0x0,0x0,0x0,0x6cdeee,0x28920a,0x28920a,0x6cdeee,0x28920a,0x0,0x0,0x0,0x28920a,0x0,0x0,0x0,0x0,0x0,0x0,0x28920a,0x28920a,0x0,0x644ee7,0x200203,0x200203,0x0,0x444ce4,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x644ee7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x4003cffe,0x4003cffe,0x6,0x18,0xc00,0x4003ffff,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x4003ffff,0x0,0x4003ffff,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x708c0000,0x708c0000,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x708c0000,0x708c0000,0x0,0x0,0x40000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x708c0000,0x0,0x0,0x708c0000,0x0,0x0,0x0,0x0,0x0,0x308c0000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x308c0000,0x0,0x708c0000,0x0,0x0,0x0,0x40000000,0x0,0x0,0x708c0000,0x0,0x708c0000,0x0,0x0,0x0,0x708c0000,0x0,0x0,0x0,0x708c0000,0x708c0000,0x708c0000,0x708c0000,0x708c0000,0x0,0x40000000,0x40000000,0x708c0000,0x0,0x0,0x0,0x0,0x40000000,0x0,0x708c0000,0x708c0000,0x0,0x40000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x100000,0x200000,0x1002,0x2,0x0,0x0,0x0,0x1002,0x0,0x1000,0x0,0x1002,0x100,0x1002,0x100000,0x200000,0x1000,0x20,0x1000000,0x20,0x2,0x0,0x0,0x0,0x0,0x100000,0x200000,0x1000,0x1000000,0x20,0x2,0x0,0x0,0x0,0x200,0x800,0xa80,0x100,0x400,0x20,0x3c0300a,0x3c0300a,0x100,0x800,0x20,0x0,0x88,0x100,0x200,0x0,0x800,0x0,0x800,0x800,0x802,0xc0028a,0x0,0x0,0x0,0x100,0x4000,0x0,0x0,0x0,0x100,0x400,0x4000,0x100000,0x200000,0x10000000,0x20000000,0x8000000,0x90000,0x90000,0x0,0x60800,0x60800,0x80000000,0x3000000,0x3000000,0x44000000,0x44000000,0x3000000,0x3c03002,0x3000,0x3000,0x2,0x2,0xc00000,0x800,0x2,0x2,0x2,0x0,0x0,0x800,0x2,0x0,0x20,0x0,0x0,0x3c03002,0x100,0x800,0x22,0x800,0x20,0x20,0xc0008a,0x8000,0xc0008a,0x100,0xc00400,0xc00400,0xc00002,0x0,0x0,0x0,0x3c03202,0x3c03002,0x3c03002,0x3c03282,0x3c03002,0x100,0x0,0x0,0x3c03002,0x0,0x0,0x0,0x200,0x0,0x100,0x3c0320a,0x3c0320a,0x100,0x280,0x200,0x280,0x0,0x200,0x0,0x800,0x0,0x0,0x0,0x200,0x100,0xa88,0x80,0x100,0x0,0x100,0x8000000,0x200,0x2,0x8,0x100,};
   }
   private static void jj_la1_init_4() {
      jj_la1_4 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x0,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x18000,0x18000,0x18000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000,0x4000,0x0,0x0,0x0,0x20000,0x20000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x7ff,0x7ff,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[54];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public AspectJParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public AspectJParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AspectJParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 158; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 158; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public AspectJParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new AspectJParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 158; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 158; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public AspectJParser(AspectJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 158; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AspectJParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 158; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[146];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 158; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 146; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 54; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
