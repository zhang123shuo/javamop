options {
  STATIC = false;
  ERROR_REPORTING = true;
}

PARSER_BEGIN(SRSParser)
  package logicrepository.plugins.srs;

  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.HashSet;
  import java.io.*;

  public class SRSParser {
    public static SRSParser parse(InputStream input) {
      SRSParser srsParser = new SRSParser(input);
      try{
        srsParser.Start();
      }
      catch(Exception e){
        System.err.println(e.getMessage());
        System.exit(1);
      }
      return srsParser;
    }

    public static void main(String[] args) throws ParseException, TokenMgrError {
      SRSParser parser = new SRSParser(System.in);
      parser.Start();
      SRS srs = parser.getSRS();
      System.out.println(srs.toString());
      PatternMatchAutomaton p = new PatternMatchAutomaton(srs);
      System.out.println(p);
      SinglyLinkedList<Symbol> l = new SinglyLinkedList<Symbol>();
      for(String s : args){
        l.add(Terminal.get(s)); 
      }
      p.search(l);
      p.rewrite(l);
    }
  
    private SRS srs;
    public SRS getSRS() { return srs; }

  }

PARSER_END(SRSParser)

SKIP : {
  <WHITESPACE: [" ","\t", "\r", "\n"]>
}

TOKEN : {
    <EPSILON   : "#epsilon" >
  | <FAIL      : "#fail"    >
  | <SUCCEED   : "#succeed" >
  | <PERIOD    : "."        >
  | <ARROW     : "->"       > 
  | <TERMINAL  : ["A"-"z"](["A"-"z"]|"_"|["0"-"9"])* >
}

void Start() : {
  srs = new SRS();
}
{
  Srs() <EOF>
}

void Srs() : {
  Rule r;
}
{
  r = Rule()
  { srs.add(r); }
  "."
  (
   r = Rule()
   {srs.add(r); }
  "." )* 
}

Rule Rule() : {
  Sequence lhs;
  AbstractSequence rhs;
}
{
  lhs = Sequence() 
  "->"
  (rhs = Sequence() | rhs = Epsilon() | rhs = SucceedOrFail() )
  { return new Rule(lhs,rhs); }
}

Sequence Sequence() : {
  Sequence ret = new Sequence();
  Symbol s;
  Token t;
}
{
  t = <TERMINAL>
  { ret.add(Symbol.get(t.image)); }
  (
    t = <TERMINAL>
    { ret.add(Symbol.get(t.image)); }
  )*
  { return ret; }
  
}

AbstractSequence SucceedOrFail() : {}
{
  (<SUCCEED>
   { return Succeed.get(); } )
 |(<FAIL>
   { return Fail.get();    } )
}

Sequence Epsilon() : {}
{
  <EPSILON>
  { return new Sequence(); }
}
