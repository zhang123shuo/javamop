options {
  STATIC = false;
  ERROR_REPORTING = true;
}

PARSER_BEGIN(SRSParser)
  package logicrepository.plugins.srs;

  import java.util.ArrayList;
  import java.util.HashMap;
  import java.util.HashSet;
  import java.io.*;

  public class SRSParser {
    public static SRSParser parse(InputStream input) {
      SRSParser srsParser = new SRSParser(input);
      try{
        srsParser.Start();
      }
      catch(Exception e){
        System.err.println(e.getMessage());
        System.exit(1);
      }
      return srsParser;
    }

    public static void main(String[] args) throws ParseException, TokenMgrError {
      SRSParser parser = new SRSParser(System.in);
      parser.Start();
      SRS srs = parser.getSRS();
      System.out.println(srs.toString());


      ArrayList<Symbol> inputs = new ArrayList<Symbol>();
      for(String s : args){
        inputs.add(Terminal.get(s));
      }
      PatternMatchAutomaton pma = new PatternMatchAutomaton (srs, inputs); 
      System.out.println("=========Non-finalized pattern match automaton\n");
      System.out.println(pma); 
//      System.out.println("=========Finalized pattern match automaton\n");
//      System.out.println(pma.makeFinal()); 
    }
  
    private SRS srs;
    public SRS getSRS() { return srs; }

  }

PARSER_END(SRSParser)

SKIP : {
  <WHITESPACE: [" ","\t", "\r", "\n"]>
}

TOKEN : {
    <EPSILON   : "\\epsilon" >
  | <PERIOD    : "."       >
  | <LOWERCASE : ["a"-"z"] >
  | <UPPERCASE : ["A"-"Z"] >
  | <CHARACTER : <LOWERCASE>|<UPPERCASE>|"_"|["0"-"9"] >   
  | <BEGIN     : "^"       >
  | <END       : "$"       >
  | <ARROW     : "->"      > 
  | <HASH      : "#"       >
  | <TERMINAL  : <LOWERCASE>(<CHARACTER>)* >
  | <VARIABLE  : <UPPERCASE>(<CHARACTER>)* >
}

void Start() : {
  srs = new SRS();
}
{
  Srs() <EOF>
}

void Srs() : {
  Rule r;
}
{
  r = Rule()
  { srs.add(r); }
  "."
  (
   r = Rule()
   {srs.add(r); }
  "." )* 
}

Rule Rule() : {
  Sequence lhs;
  Sequence rhs;
  Sequence s;
}
{
  s = LSequence()
  {lhs = s; } 
  "->"
  s = RSequence()
  {rhs = s; }
  { return new Rule(lhs,rhs); }
}

Sequence LSequence() : {
  Sequence ret = new Sequence();
  Symbol s;
  Token t;
}
{
  [ t = "^" 
    { ret.add(Begin.get()); }
  ]
  s = Symbol()
  { ret.add(s); }
  (
    s = Symbol()
    { ret.add(s); }
  )*
  [ t = "$" 
    { ret.add(End.get()); }
  ]
  { return ret; }
  
}


Sequence RSequence() : {
  Sequence ret = new Sequence();
  Symbol s;
}
{
  s = Symbol()
  { ret.add(s); }
  (
    s = Symbol()
    { ret.add(s); }
  )*
  { return ret; }
}

Symbol Symbol() : {
  Token t;
}
{
  (
    t = <TERMINAL> 
    { return Terminal.get(t.image); }
  )
  | (
    t = <LOWERCASE>
    { return Terminal.get(t.image); }
  ) 
  | (
    t = <VARIABLE>
    { return Variable.get(t.image); }
  )
  | (
    t = <UPPERCASE>
    { return Variable.get(t.image); }
  )
  | (
    t = "\\epsilon"
    { return Variable.get(t.image); }
  )
}

